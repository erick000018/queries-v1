package pe.gob.eje.penal.ms.delito.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import pe.gob.eje.penal.ms.delito.data.entity.CfgFuenteEstructura;
import pe.gob.eje.penal.ms.delito.data.entity.MaeEstadoDelito;
import pe.gob.eje.penal.ms.delito.data.entity.MaeEstadoDelitosDet;
import pe.gob.eje.penal.ms.delito.data.entity.MaeEstadoNormaLegal;
import pe.gob.eje.penal.ms.delito.data.entity.MaeTipoDelitoDetalle;
import pe.gob.eje.penal.ms.delito.data.entity.MaeTipoMovimiento;
import pe.gob.eje.penal.ms.delito.data.entity.MovDelito;
import pe.gob.eje.penal.ms.delito.data.entity.MovDelitosDet;
import pe.gob.eje.penal.ms.delito.data.entity.MovNormaLegal;
import pe.gob.eje.penal.ms.delito.data.entity.MovNormaLegalDelito;
import pe.gob.eje.penal.ms.delito.data.entity.Usuario;
import pe.gob.eje.penal.ms.delito.http.PaginatedResponse;
import pe.gob.eje.penal.ms.delito.model.dto.DetalleArticuloDTO;
import pe.gob.eje.penal.ms.delito.model.dto.DetalleNormaLegalDTO;
import pe.gob.eje.penal.ms.delito.model.dto.NormaLegalCabDelitoDTO;
import pe.gob.eje.penal.ms.delito.model.dto.NormaLegalDelitoDTO;
import pe.gob.eje.penal.ms.delito.model.dto.ResultadoDTO;
import pe.gob.eje.penal.ms.delito.model.dto.payload.parameters.BuscarNormaLegalParam;
import pe.gob.eje.penal.ms.delito.model.dto.payload.parameters.FiltroBusquedaParam;
import pe.gob.eje.penal.ms.delito.model.dto.payload.parameters.NormaLegalParam;
import pe.gob.eje.penal.ms.delito.model.dto.payload.parameters.NormaLegalRequest;
import pe.gob.eje.penal.ms.delito.model.projection.DetalleNormaLegalView;
import pe.gob.eje.penal.ms.delito.model.projection.NormaLegalPagView;
import pe.gob.eje.penal.ms.delito.model.projection.NormaLegalView;
import pe.gob.eje.penal.ms.delito.model.projection.ValueView;
import pe.gob.eje.penal.ms.delito.repository.IArticuloRepository;
import pe.gob.eje.penal.ms.delito.repository.IBusquedaNormasLegalesRepository;
import pe.gob.eje.penal.ms.delito.repository.ICfgFuenteEstructuraRepository;
import pe.gob.eje.penal.ms.delito.repository.IConfiguraUsuarioPerfilRepository;
import pe.gob.eje.penal.ms.delito.repository.IDelitoRepository;
import pe.gob.eje.penal.ms.delito.repository.IDelitoTudRepository;
import pe.gob.eje.penal.ms.delito.repository.IMaeEstadoDelitoDetRepository;
import pe.gob.eje.penal.ms.delito.repository.IMaeEstadoDelitoRepository;
import pe.gob.eje.penal.ms.delito.repository.IMaeEstadoNormaLegalRepository;
import pe.gob.eje.penal.ms.delito.repository.IMaeTipoDelitoDetalleRepository;
import pe.gob.eje.penal.ms.delito.repository.IMaeTipoMovimientoRepository;
import pe.gob.eje.penal.ms.delito.repository.IMovDelitosDetRepository;
import pe.gob.eje.penal.ms.delito.repository.INormaLegalRepository;
import pe.gob.eje.penal.ms.delito.repository.IRelacionNormaDelitoRepository;
import pe.gob.eje.penal.ms.delito.repository.IUsuarioRepository;
import pe.gob.eje.penal.ms.delito.service.INormaLegalService;
import pe.gob.eje.penal.ms.delito.util.Constant;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Service
public class NormaLegalService implements INormaLegalService {
	
	@Autowired
	private INormaLegalRepository normaLegalRepository;

	@Autowired
	private IArticuloRepository articuloRepository;

	@Autowired
	private IRelacionNormaDelitoRepository relacionNormaDelitoRepository;

    @Autowired
    private IMaeEstadoNormaLegalRepository maeEstadoNormaLegalRepository;

    @Autowired
    private IDelitoRepository delitoRepository;

    @Autowired
    private IBusquedaNormasLegalesRepository busquedaNormasLegalesRepository;

    @Autowired
    private IDelitoTudRepository delitoTudRepository;

    @Autowired
    private IMaeEstadoDelitoRepository maeEstadoDelitoRepository;

    @Autowired
    private ICfgFuenteEstructuraRepository cfgFuenteEstructuraRepository;

    @Autowired
    private IMaeTipoDelitoDetalleRepository maeTipoDelitoDetalleRepository;

    @Autowired
    private IMaeEstadoDelitoDetRepository maeEstadoDelitoDetRepository;

    @Autowired
    private IMovDelitosDetRepository movDelitosDetRepository;

    @Autowired
    private IMaeTipoMovimientoRepository maeTipoMovimientoRepository;

    @Autowired
    private IUsuarioRepository usuarioRepository;

    @Autowired
    private IConfiguraUsuarioPerfilRepository configuraUsuarioPerfilRepository;

	DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);

    @Override
	public List<NormaLegalView> listarNormasLegales(BuscarNormaLegalParam buscarNormaLegalParam) {
		List<NormaLegalView> n;
		//n=normaLegalRepository.listarNormasLegales(buscarNormaLegalParam.getDescripcion(), buscarNormaLegalParam.getFechaInicio(), buscarNormaLegalParam.getFechaFin(), buscarNormaLegalParam.getIdEstado());
		if (buscarNormaLegalParam.getFechaInicio().isEmpty() &&
                (buscarNormaLegalParam.getIdEstado()==null || buscarNormaLegalParam.getIdEstado() == Long.valueOf(Constant.TODOS))
        )
		{
			n=normaLegalRepository.listarNormasLegalesporDescripcion(buscarNormaLegalParam.getDescripcion().toUpperCase());
		} else if (buscarNormaLegalParam.getIdEstado()==null) {
            LocalDate fechaInicio = LocalDate.parse(buscarNormaLegalParam.getFechaInicio(), formatter);
            LocalDate fechaFin = LocalDate.parse(buscarNormaLegalParam.getFechaFin(), formatter);
			n=normaLegalRepository.listarNormasLegalesporFechaDescripcion(buscarNormaLegalParam.getDescripcion().toUpperCase(), fechaInicio, fechaFin);
		} else if(buscarNormaLegalParam.getFechaInicio().isEmpty() && buscarNormaLegalParam.getDescripcion().isEmpty())
		{
			n=normaLegalRepository.listarNormasLegalesporEstado(buscarNormaLegalParam.getIdEstado());
		} else if(buscarNormaLegalParam.getFechaInicio().isEmpty()){
			n=normaLegalRepository.listarNormasLegalesporDescripcionEstado(buscarNormaLegalParam.getDescripcion(), buscarNormaLegalParam.getIdEstado());
		} else{
            LocalDate fechaInicio = LocalDate.parse(buscarNormaLegalParam.getFechaInicio(), formatter);
            LocalDate fechaFin = LocalDate.parse(buscarNormaLegalParam.getFechaFin(), formatter);
			n=normaLegalRepository.listarNormasLegalesDescripcionFechaEstado(buscarNormaLegalParam.getDescripcion(), fechaInicio, fechaFin, buscarNormaLegalParam.getIdEstado());
		}
		return n;
	}

    @Override
    public PaginatedResponse<NormaLegalPagView> listarNormasLegalesPag(FiltroBusquedaParam request) {
        PageImpl<NormaLegalPagView> result = busquedaNormasLegalesRepository.getBusquedaNormasLegales(request);
        PaginatedResponse<NormaLegalPagView> response = new PaginatedResponse<>();
        response.setItems(result.getContent());
        response.getPagination().setPageSize(result.getSize());
        response.getPagination().setCurrentPage(result.getNumber());
        response.getPagination().setTotalPages(result.getTotalPages());
        response.getPagination().setTotalItems(result.getTotalElements());
        return response;
    }


    /*validarNormaLegalDesfasa*/
//    @Override
//    public ResultadoDTO validarNormaLegalDesfasa(NormaLegalRequest normaLegalRequest, String codigoUsuario) {
//        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
//        ResultadoDTO resultadoDTO = new ResultadoDTO();
//        Long idnormaLegalDelito = relacionNormaDelitoRepository.MaxId();
//        MovNormaLegal normaLegal = normaLegalRepository.findById(normaLegalRequest.getDecretoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_NORMA_NO_ENCONTRADA));
//        Long MaxIdDelito = articuloRepository.MaxDelitos();
//        MovNormaLegalDelito normaLegalDelito = new MovNormaLegalDelito();
//        Usuario usuario = usuarioRepository.buscarUsuarioxCodigo(codigoUsuario);
//
//        if (idnormaLegalDelito == null) {
//            idnormaLegalDelito = 1L;
//        }
//
//        if (normaLegalRequest.getAccion() == 3) {//AcciÃ³n: Incorporar
//            MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//            MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.INCORPORAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//
//            if (normaLegalRequest.getDelitoId() != null) {
//                /*Actualiza el estado*/
//                MaeEstadoDelitosDet estadoDelitoEliminado = maeEstadoDelitoDetRepository.findById(Constant.ELIMINAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                /*Actualiza el estado del delito*/
//                movDelito.setFecha(LocalDate.now());
//                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
//                movDelito.setFlag("U");
//                articuloRepository.save(movDelito);
//
//                for (MovDelitosDet delitos : movDelitosDets) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoEliminado);
//                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//                    movDelitosDetRepository.save(delitos);
//                }
//
//                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
//
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleParrafo = maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleNumeral = maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleLiteral = maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));
//                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
//                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
//                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();
//                for (int i = 0; i < movDelitoDTODet.size(); i++) {
//                    if (movDelitoDTODet.get(i).getNivel() == 1) {
//                        MovDelitosDet movDelitosDetParrafo = new MovDelitosDet();
//                        movDelitosDetParrafo.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetParrafo.setDelito(movDelito);
//                        movDelitosDetParrafo.setTipoDelitoDetalle(maeTipoDelitoDetalleParrafo);
//                        movDelitosDetParrafo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + "." + movDelitoDTODet.get(i).getNumeracion() + ".0.0");
//                        movDelitosDetParrafo.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetParrafo.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetParrafo.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetParrafo.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetParrafo.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetParrafo.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setVersion(1);
//                        movDelitosDetParrafo.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetParrafo.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetParrafo.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetParrafo.setFecha(LocalDate.now());
//                        movDelitosDetParrafo.setFlag("I");
//                        movDelitosDetParrafo.setUid("tud");
//                        movDelitosDetParrafo.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetParrafo.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetParrafo.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetParrafo);
//                        listDelitosParrafo.add(movDelitosDetParrafo);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 2) {
//                        MovDelitosDet movDelitosDetNumeral = new MovDelitosDet();
//                        movDelitosDetNumeral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetNumeral.setDelito(movDelito);
//                        movDelitosDetNumeral.setTipoDelitoDetalle(maeTipoDelitoDetalleNumeral);
//                        movDelitosDetNumeral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetNumeral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetNumeral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetNumeral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetNumeral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetNumeral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetNumeral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setVersion(1);
//                        movDelitosDetNumeral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetNumeral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetNumeral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetNumeral.setFecha(LocalDate.now());
//                        movDelitosDetNumeral.setFlag("I");
//                        movDelitosDetNumeral.setUid("tud");
//                        movDelitosDetNumeral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetNumeral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetNumeral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetNumeral);
//                        listDelitosNumeral.add(movDelitosDetNumeral);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 3) {
//                        MovDelitosDet movDelitosDetLiteral = new MovDelitosDet();
//                        movDelitosDetLiteral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetLiteral.setDelito(movDelito);
//                        movDelitosDetLiteral.setTipoDelitoDetalle(maeTipoDelitoDetalleLiteral);
//                        movDelitosDetLiteral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetLiteral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetLiteral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetLiteral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetLiteral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetLiteral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetLiteral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setVersion(1);
//                        movDelitosDetLiteral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetLiteral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetLiteral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetLiteral.setFecha(LocalDate.now());
//                        movDelitosDetLiteral.setFlag("I");
//                        movDelitosDetLiteral.setUid("tud");
//                        movDelitosDetLiteral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetLiteral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetLiteral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetLiteral);
//                        listDelitosLiteral.add(movDelitosDetLiteral);
//                        MaxIdDelitoDet++;
//                    }
//                }
//
//                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
//                    for (int i = 0; i < listDelitosParrafo.size(); i++) {
//                        for (int j = 0; j < listDelitosNumeral.size(); j++) {
//                            if (Objects.equals(listDelitosNumeral.get(j).getDelitosAncestro(),
//                                    listDelitosParrafo.get(i).getCodigoTud())) {
//                                listDelitosNumeral.get(j).setDelitosDetPadre(listDelitosParrafo.get(i).getMovDelitosDetId());
//                                listDelitosNumeral.get(j).setCodigo(listDelitosNumeral.get(j).getCodigo() +
//                                        listDelitosParrafo.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosNumeral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosNumeral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
//                    for (int i = 0; i < listDelitosNumeral.size(); i++) {
//                        for (int j = 0; j < listDelitosLiteral.size(); j++) {
//                            if (Objects.equals(listDelitosLiteral.get(j).getDelitosAncestro(),
//                                    listDelitosNumeral.get(i).getCodigoTud())) {
//                                listDelitosLiteral.get(j).setDelitosDetPadre(listDelitosNumeral.get(i).getMovDelitosDetId());
//                                listDelitosLiteral.get(j).setCodigo(listDelitosLiteral.get(j).getCodigo() +
//                                        listDelitosNumeral.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosLiteral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosLiteral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
//                normaLegalDelito.setFecha(LocalDate.now());
//                relacionNormaDelitoRepository.save(normaLegalDelito);
//            }
//            else {
//                MovDelito movDelito = new MovDelito();
//                CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(normaLegalRequest.getDelito().getCabArticulo().getIdFuenteNormativa(), normaLegalRequest.getDelito().getCabArticulo().getIdCapitulo());
//                movDelito.setMovDelitoId(MaxIdDelito);
//                movDelito.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
//                movDelito.setArticulo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
//                movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
//                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelito.setFecha(LocalDate.now());
//                movDelito.setFlag("I");
//                movDelito.setUid("tud");
//                movDelito.setCfgFuenteEstructura(cfgFuenteEstructura);
//                articuloRepository.save(movDelito);
//
//                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
//
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleParrafo = maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleNumeral = maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleLiteral = maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));
//                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
//                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
//                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();
//                for (int i = 0; i < movDelitoDTODet.size(); i++) {
//                    if (movDelitoDTODet.get(i).getNivel() == 1) {
//                        MovDelitosDet movDelitosDetParrafo = new MovDelitosDet();
//                        movDelitosDetParrafo.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetParrafo.setDelito(movDelito);
//                        movDelitosDetParrafo.setTipoDelitoDetalle(maeTipoDelitoDetalleParrafo);
//                        movDelitosDetParrafo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + "." + movDelitoDTODet.get(i).getNumeracion() + ".0.0");
//                        movDelitosDetParrafo.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetParrafo.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetParrafo.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetParrafo.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetParrafo.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetParrafo.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setVersion(1);
//                        movDelitosDetParrafo.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetParrafo.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetParrafo.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetParrafo.setFecha(LocalDate.now());
//                        movDelitosDetParrafo.setFlag("I");
//                        movDelitosDetParrafo.setUid("tud");
//                        movDelitosDetParrafo.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetParrafo.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetParrafo.setEstadoDelitoDetalle(1);
//                        movDelitosDetParrafo.setOrden(movDelitoDTODet.get(i).getOrden());
//                        movDelitosDetRepository.save(movDelitosDetParrafo);
//                        listDelitosParrafo.add(movDelitosDetParrafo);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 2) {
//                        MovDelitosDet movDelitosDetNumeral = new MovDelitosDet();
//                        movDelitosDetNumeral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetNumeral.setDelito(movDelito);
//                        movDelitosDetNumeral.setTipoDelitoDetalle(maeTipoDelitoDetalleNumeral);
//                        movDelitosDetNumeral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetNumeral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetNumeral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetNumeral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetNumeral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetNumeral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetNumeral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setVersion(1);
//                        movDelitosDetNumeral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetNumeral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetNumeral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetNumeral.setFecha(LocalDate.now());
//                        movDelitosDetNumeral.setFlag("I");
//                        movDelitosDetNumeral.setUid("tud");
//                        movDelitosDetNumeral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetNumeral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetNumeral.setEstadoDelitoDetalle(1);
//                        movDelitosDetNumeral.setOrden(movDelitoDTODet.get(i).getOrden());
//                        movDelitosDetRepository.save(movDelitosDetNumeral);
//                        listDelitosNumeral.add(movDelitosDetNumeral);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 3) {
//                        MovDelitosDet movDelitosDetLiteral = new MovDelitosDet();
//                        movDelitosDetLiteral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetLiteral.setDelito(movDelito);
//                        movDelitosDetLiteral.setTipoDelitoDetalle(maeTipoDelitoDetalleLiteral);
//                        movDelitosDetLiteral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetLiteral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetLiteral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetLiteral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetLiteral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetLiteral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetLiteral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setVersion(1);
//                        movDelitosDetLiteral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetLiteral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetLiteral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetLiteral.setFecha(LocalDate.now());
//                        movDelitosDetLiteral.setFlag("I");
//                        movDelitosDetLiteral.setUid("tud");
//                        movDelitosDetLiteral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetLiteral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetLiteral.setEstadoDelitoDetalle(1);
//                        movDelitosDetLiteral.setOrden(movDelitoDTODet.get(i).getOrden());
//                        movDelitosDetRepository.save(movDelitosDetLiteral);
//                        listDelitosLiteral.add(movDelitosDetLiteral);
//                        MaxIdDelitoDet++;
//                    }
//                }
//
//                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
//                    for (int i = 0; i < listDelitosParrafo.size(); i++) {
//                        for (int j = 0; j < listDelitosNumeral.size(); j++) {
//                            if (Objects.equals(listDelitosNumeral.get(j).getDelitosAncestro(),
//                                    listDelitosParrafo.get(i).getCodigoTud())) {
//                                listDelitosNumeral.get(j).setDelitosDetPadre(listDelitosParrafo.get(i).getMovDelitosDetId());
//                                listDelitosNumeral.get(j).setCodigo(listDelitosNumeral.get(j).getCodigo() +
//                                        listDelitosParrafo.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosNumeral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosNumeral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
//                    for (int i = 0; i < listDelitosNumeral.size(); i++) {
//                        for (int j = 0; j < listDelitosLiteral.size(); j++) {
//                            if (Objects.equals(listDelitosLiteral.get(j).getDelitosAncestro(),
//                                    listDelitosNumeral.get(i).getCodigoTud())) {
//                                listDelitosLiteral.get(j).setDelitosDetPadre(listDelitosNumeral.get(i).getMovDelitosDetId());
//                                listDelitosLiteral.get(j).setCodigo(listDelitosLiteral.get(j).getCodigo() +
//                                        listDelitosNumeral.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosLiteral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosLiteral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                normaLegalDelito.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelito.setMovDelito(movDelito);
//                normaLegalDelito.setNormaLegal(normaLegal);
//                normaLegalDelito.setTipoMovimiento(tipoMovimiento);
//                normaLegalDelito.setFechaRegistro(LocalDate.now());
//                normaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelito.setFecha(LocalDate.now());
//                normaLegalDelito.setFlag("I");
//                relacionNormaDelitoRepository.save(normaLegalDelito);
//            }
//            resultadoDTO.setResultado("Los Datos se guardaron correctamente");
//        }
//        if (normaLegalRequest.getAccion() == 6) {//AcciÃ³n: Derogar Total
//            MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.DEROGAR_TOTAL).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//            normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
//            MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
//            MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//
//            if (normaLegalDelito != null) {
//                /*Actualiza el estado del delito*/
//                movDelito.setFecha(LocalDate.parse(normaLegalRequest.getDelito().getCabArticulo().getFechaRegistro(), formatter));
//                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelito.setFlag("U");
//                articuloRepository.save(movDelito);
//
//                /*Actualiza el estado relacion normaLegalDelito*/
//                normaLegalDelito.setFecha(LocalDate.now());
//                normaLegalDelito.setFlag("U");
//                relacionNormaDelitoRepository.save(normaLegalDelito);
//
//                /*Actualiza el estado del detalle Actual*/
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                for (MovDelitosDet delitos : movDelitosDets) {
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setFechaFinVigencia(normaLegalRequest.getDelito().getCabArticulo().getFechaRegistro());
//                    movDelitosDetRepository.save(delitos);
//                }
//
//            }
//            else {
//                /*Actualiza el estado del detalle Actual*/
//                MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
//                for (MovDelitosDet delitos : movDelitosDets) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
//                    delitos.setFechaFinVigencia(normaLegalRequest.getDelito().getCabArticulo().getFechaRegistro());
//                    movDelitosDetRepository.save(delitos);
//                }
//
//                nuevoNormaLegalDelito.setNormaLegalDelitosId(idnormaLegalDelito);
//                nuevoNormaLegalDelito.setMovDelito(movDelito);
//                nuevoNormaLegalDelito.setNormaLegal(normaLegal);
//                nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
//                nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
//                nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
//                nuevoNormaLegalDelito.setFecha(LocalDate.now());
//                nuevoNormaLegalDelito.setFlag("I");
//                relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);
//            }
//            resultadoDTO.setResultado("Los Datos se guardaron correctamente");
//        }
//        if (normaLegalRequest.getAccion() == 4) {//AcciÃ³n: Reubicar
//            MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.REUBICAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//            MaeTipoMovimiento tipoMovimientoNuevo = maeTipoMovimientoRepository.findById(Constant.NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//            normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
//            MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
//
//            if (normaLegalDelito != null) {
//                /*Actualiza el estado relacion normaLegalDelito*/
//                normaLegalDelito.setEstado(Constant.ESTADO_INACTIVO);
//                normaLegalDelito.setFecha(LocalDate.now());
//                normaLegalDelito.setFlag("U");
//                relacionNormaDelitoRepository.save(normaLegalDelito);
//
//                /*Actualiza el estado de la referencia normaLegalDelito*/
//                MovNormaLegalDelito normaLegalDelitoReferencia = normaLegalRepository.normaLegalDelitoReferencia(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
//                normaLegalDelitoReferencia.setEstado(Constant.ESTADO_INACTIVO);
//                normaLegalDelitoReferencia.setFecha(LocalDate.now());
//                normaLegalDelitoReferencia.setFlag("U");
//                normaLegalDelitoReferencia.setUsuario(usuario);
//                relacionNormaDelitoRepository.save(normaLegalDelitoReferencia);
//
//                /*Inserta Relacion de Delito Actual*/
//                MovNormaLegalDelito normaLegalDelito1 = new MovNormaLegalDelito();
//                normaLegalDelito1.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelito1.setMovDelito(movDelito);
//                normaLegalDelito1.setNormaLegal(normaLegal);
//                normaLegalDelito1.setTipoMovimiento(tipoMovimiento);
//                normaLegalDelito1.setFechaRegistro(LocalDate.now());
//                normaLegalDelito1.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelito1.setFecha(LocalDate.now());
//                normaLegalDelito1.setFlag("I");
//                relacionNormaDelitoRepository.save(normaLegalDelito1);
//                idnormaLegalDelito++;
//
//                /*Inserta Cabecera de Delito Nuevo*/
//                MovDelito movDelitoNuevo = new MovDelito();
//                MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(normaLegalRequest.getDelito().getCabArticulo().getIdFuenteNormativa(), normaLegalRequest.getDelito().getCabArticulo().getIdCapitulo());
//                movDelitoNuevo.setMovDelitoId(MaxIdDelito);
//                movDelitoNuevo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
//                movDelitoNuevo.setArticulo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
//                movDelitoNuevo.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
//                movDelitoNuevo.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelitoNuevo.setFecha(LocalDate.now());
//                movDelitoNuevo.setFlag("I");
//                movDelitoNuevo.setUid("tud");
//                movDelitoNuevo.setCfgFuenteEstructura(cfgFuenteEstructura);
//                articuloRepository.save(movDelitoNuevo);
//
//                /*Inserta Detalle de Delito Nuevo*/
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//                for (MovDelitosDet movDelitosDet : movDelitosDets) {
//                    MovDelitosDet movDelitosDetNuevo = new MovDelitosDet();
//                    movDelitosDetNuevo.setMovDelitosDetId(MaxIdDelitoDet);
//                    movDelitosDetNuevo.setDelito(movDelitoNuevo);
//                    movDelitosDetNuevo.setTipoDelitoDetalle(movDelitosDet.getTipoDelitoDetalle());
//                    movDelitosDetNuevo.setCodigo(movDelitosDet.getCodigo());
//                    movDelitosDetNuevo.setPenaMin(movDelitosDet.getPenaMin());
//                    movDelitosDetNuevo.setPenaMax(movDelitosDet.getPenaMax());
//                    movDelitosDetNuevo.setFechaIniVigencia(movDelitosDet.getFechaIniVigencia());
//                    movDelitosDetNuevo.setFechaFinVigencia(movDelitosDet.getFechaFinVigencia());
//                    movDelitosDetNuevo.setModificado(movDelitosDet.getModificado());
//                    movDelitosDetNuevo.setEstado(movDelitosDet.getEstado());
//                    movDelitosDetNuevo.setVersion(movDelitosDet.getVersion() + 1);
//                    movDelitosDetNuevo.setVigente(movDelitosDet.getVigente());
//                    movDelitosDetNuevo.setEstadoDelitoDetalle(movDelitosDet.getEstadoDelitoDetalle());
//                    movDelitosDetNuevo.setCodigoDelito(movDelitosDet.getCodigoDelito());
//                    movDelitosDetNuevo.setDescripcionDelito(movDelitosDet.getDescripcionDelito());
//                    movDelitosDetNuevo.setDelitosDetPadre(movDelitosDet.getDelitosDetPadre());
//                    movDelitosDetNuevo.setCodigoTud(movDelitosDet.getCodigoTud());
//                    movDelitosDetNuevo.setEstadoDelitosDet(movDelitosDet.getEstadoDelitosDet());
//                    movDelitosDetNuevo.setFecha(LocalDate.now());
//                    movDelitosDetNuevo.setFlag("I");
//                    movDelitosDetRepository.save(movDelitosDetNuevo);
//                    MaxIdDelitoDet++;
//                }
//
//                /*Inserta Relacion de Delito Nuevo*/
//                MovNormaLegalDelito normaLegalDelito2 = new MovNormaLegalDelito();
//                normaLegalDelito2.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelito2.setMovDelito(movDelitoNuevo);
//                normaLegalDelito2.setNormaLegal(normaLegal);
//                normaLegalDelito2.setTipoMovimiento(tipoMovimientoNuevo);
//                normaLegalDelito2.setFechaRegistro(LocalDate.now());
//                normaLegalDelito2.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelito2.setFecha(LocalDate.now());
//                normaLegalDelito2.setFlag("I");
//                normaLegalDelito2.setIdMovDelitosReferencia(normaLegalRequest.getDelitoId());
//                relacionNormaDelitoRepository.save(normaLegalDelito2);
//                idnormaLegalDelito++;
//
//                /*Actualiza el estado de la cabecera del Delito*/
//                //MaeEstadoDelito estadoDelitoArchivo = maeEstadoDelitoRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelito.setFecha(LocalDate.now());
//                movDelito.setFlag("U");
//                articuloRepository.save(movDelito);
//
//                /*Actualiza el estado del detalle Actual*/
//                List<MovDelitosDet> movDelitosDetsActual = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                for (MovDelitosDet delitos : movDelitosDetsActual) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
//                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//                    movDelitosDetRepository.save(delitos);
//                }
//            }
//            else {
//                /*Inserta Relacion de Delito Actual*/
//                MovNormaLegalDelito normaLegalDelitoActual = new MovNormaLegalDelito();
//                normaLegalDelitoActual.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelitoActual.setMovDelito(movDelito);
//                normaLegalDelitoActual.setNormaLegal(normaLegal);
//                normaLegalDelitoActual.setTipoMovimiento(tipoMovimiento);
//                normaLegalDelitoActual.setFechaRegistro(LocalDate.now());
//                normaLegalDelitoActual.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelitoActual.setFecha(LocalDate.now());
//                normaLegalDelitoActual.setFlag("I");
//                relacionNormaDelitoRepository.save(normaLegalDelitoActual);
//                idnormaLegalDelito++;
//
//                /*Inserta Cabecera de Delito Nuevo*/
//                MovDelito movDelitoNuevo = new MovDelito();
//                MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(normaLegalRequest.getDelito().getCabArticulo().getIdFuenteNormativa(), normaLegalRequest.getDelito().getCabArticulo().getIdCapitulo());
//                movDelitoNuevo.setMovDelitoId(MaxIdDelito);
//                movDelitoNuevo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
//                movDelitoNuevo.setArticulo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
//                movDelitoNuevo.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
//                movDelitoNuevo.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelitoNuevo.setFecha(LocalDate.now());
//                movDelitoNuevo.setFlag("I");
//                movDelitoNuevo.setUid("tud");
//                movDelitoNuevo.setCfgFuenteEstructura(cfgFuenteEstructura);
//                articuloRepository.save(movDelitoNuevo);
//
//                /*Inserta Detalle de Delito Nuevo*/
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//                for (MovDelitosDet movDelitosDet : movDelitosDets) {
//                    MovDelitosDet movDelitosDetNuevo = new MovDelitosDet();
//                    movDelitosDetNuevo.setMovDelitosDetId(MaxIdDelitoDet);
//                    movDelitosDetNuevo.setDelito(movDelitoNuevo);
//                    movDelitosDetNuevo.setTipoDelitoDetalle(movDelitosDet.getTipoDelitoDetalle());
//                    movDelitosDetNuevo.setCodigo(movDelitosDet.getCodigo());
//                    movDelitosDetNuevo.setPenaMin(movDelitosDet.getPenaMin());
//                    movDelitosDetNuevo.setPenaMax(movDelitosDet.getPenaMax());
//                    movDelitosDetNuevo.setFechaIniVigencia(movDelitosDet.getFechaIniVigencia());
//                    movDelitosDetNuevo.setFechaFinVigencia(movDelitosDet.getFechaFinVigencia());
//                    movDelitosDetNuevo.setModificado(movDelitosDet.getModificado());
//                    movDelitosDetNuevo.setEstado(movDelitosDet.getEstado());
//                    movDelitosDetNuevo.setVersion(movDelitosDet.getVersion() + 1);
//                    movDelitosDetNuevo.setVigente(movDelitosDet.getVigente());
//                    movDelitosDetNuevo.setEstadoDelitoDetalle(movDelitosDet.getEstadoDelitoDetalle());
//                    movDelitosDetNuevo.setCodigoDelito(movDelitosDet.getCodigoDelito());
//                    movDelitosDetNuevo.setDescripcionDelito(movDelitosDet.getDescripcionDelito());
//                    movDelitosDetNuevo.setDelitosDetPadre(movDelitosDet.getDelitosDetPadre());
//                    movDelitosDetNuevo.setCodigoTud(movDelitosDet.getCodigoTud());
//                    movDelitosDetNuevo.setEstadoDelitosDet(movDelitosDet.getEstadoDelitosDet());
//                    movDelitosDetNuevo.setFecha(LocalDate.now());
//                    movDelitosDetNuevo.setFlag("I");
//                    movDelitosDetRepository.save(movDelitosDetNuevo);
//                    MaxIdDelitoDet++;
//                }
//
//                /*Inserta Relacion de Delito Nuevo*/
//                MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
//                normaLegalDelitoNuevo.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelitoNuevo.setMovDelito(movDelitoNuevo);
//                normaLegalDelitoNuevo.setNormaLegal(normaLegal);
//                normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimientoNuevo);
//                normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
//                normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelitoNuevo.setFecha(LocalDate.now());
//                normaLegalDelitoNuevo.setFlag("I");
//                normaLegalDelitoNuevo.setIdMovDelitosReferencia(normaLegalRequest.getDelitoId());
//                normaLegalDelitoNuevo.setUsuario(usuario);
//                relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
//                idnormaLegalDelito++;
//
//                /*Actualiza el estado de la cabecera del Delito*/
//                MaeEstadoDelito estadoDelitoArchivo = maeEstadoDelitoRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelito.setFecha(LocalDate.now());
//                movDelito.setFlag("U");
//                articuloRepository.save(movDelito);
//
//                /*Actualiza el estado del detalle Actual*/
//                List<MovDelitosDet> movDelitosDetsActual = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                for (MovDelitosDet delitos : movDelitosDetsActual) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
//                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//                    movDelitosDetRepository.save(delitos);
//                }
//            }
//            resultadoDTO.setResultado("Los Datos se guardaron correctamente");
//        }
//        if (normaLegalRequest.getAccion() == 2) {//AcciÃ³n: Modificar
//            MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.MODIFICAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//            normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
//            MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
//            MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//
//            if (normaLegalDelito != null) {
//                /*Actualiza el estado del delito*/
//                movDelito.setFecha(LocalDate.now());
//                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelito.setFlag("U");
//                movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
//                articuloRepository.save(movDelito);
//
//                /*Actualiza el estado relacion normaLegalDelito*/
//                normaLegalDelito.setEstado(Constant.ESTADO_INACTIVO);
//                normaLegalDelito.setFecha(LocalDate.now());
//                normaLegalDelito.setFlag("U");
//                normaLegalDelito.setUsuario(usuario);
//                relacionNormaDelitoRepository.save(normaLegalDelito);
//
//                /*Actualiza el estado del detalle Actual*/
//                MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                for (MovDelitosDet delitos : movDelitosDets) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
//                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//                    movDelitosDetRepository.save(delitos);
//                }
//
//                MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
//                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
//
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleParrafo = maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleNumeral = maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleLiteral = maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));
//                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
//                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
//                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();
//                for (int i = 0; i < movDelitoDTODet.size(); i++) {
//                    if (movDelitoDTODet.get(i).getNivel() == 1) {
//                        MovDelitosDet movDelitosDetParrafo = new MovDelitosDet();
//                        movDelitosDetParrafo.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetParrafo.setDelito(movDelito);
//                        movDelitosDetParrafo.setTipoDelitoDetalle(maeTipoDelitoDetalleParrafo);
//                        movDelitosDetParrafo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + "." + movDelitoDTODet.get(i).getNumeracion() + ".0.0");
//                        movDelitosDetParrafo.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetParrafo.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetParrafo.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetParrafo.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetParrafo.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetParrafo.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setVersion(1);
//                        movDelitosDetParrafo.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetParrafo.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetParrafo.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetParrafo.setFecha(LocalDate.now());
//                        movDelitosDetParrafo.setFlag("I");
//                        movDelitosDetParrafo.setUid("tud");
//                        movDelitosDetParrafo.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetParrafo.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetParrafo.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetParrafo);
//                        listDelitosParrafo.add(movDelitosDetParrafo);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 2) {
//                        MovDelitosDet movDelitosDetNumeral = new MovDelitosDet();
//                        movDelitosDetNumeral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetNumeral.setDelito(movDelito);
//                        movDelitosDetNumeral.setTipoDelitoDetalle(maeTipoDelitoDetalleNumeral);
//                        movDelitosDetNumeral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetNumeral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetNumeral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetNumeral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetNumeral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetNumeral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetNumeral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setVersion(1);
//                        movDelitosDetNumeral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetNumeral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetNumeral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetNumeral.setFecha(LocalDate.now());
//                        movDelitosDetNumeral.setFlag("I");
//                        movDelitosDetNumeral.setUid("tud");
//                        movDelitosDetNumeral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetNumeral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetNumeral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetNumeral);
//                        listDelitosNumeral.add(movDelitosDetNumeral);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 3) {
//                        MovDelitosDet movDelitosDetLiteral = new MovDelitosDet();
//                        movDelitosDetLiteral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetLiteral.setDelito(movDelito);
//                        movDelitosDetLiteral.setTipoDelitoDetalle(maeTipoDelitoDetalleLiteral);
//                        movDelitosDetLiteral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetLiteral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetLiteral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetLiteral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetLiteral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetLiteral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetLiteral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setVersion(1);
//                        movDelitosDetLiteral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetLiteral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetLiteral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetLiteral.setFecha(LocalDate.now());
//                        movDelitosDetLiteral.setFlag("I");
//                        movDelitosDetLiteral.setUid("tud");
//                        movDelitosDetLiteral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetLiteral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetLiteral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetLiteral);
//                        listDelitosLiteral.add(movDelitosDetLiteral);
//                        MaxIdDelitoDet++;
//                    }
//                }
//
//                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
//                    for (int i = 0; i < listDelitosParrafo.size(); i++) {
//                        for (int j = 0; j < listDelitosNumeral.size(); j++) {
//                            if (Objects.equals(listDelitosNumeral.get(j).getDelitosAncestro(),
//                                    listDelitosParrafo.get(i).getCodigoTud())) {
//                                listDelitosNumeral.get(j).setDelitosDetPadre(listDelitosParrafo.get(i).getMovDelitosDetId());
//                                listDelitosNumeral.get(j).setCodigo(listDelitosNumeral.get(j).getCodigo() +
//                                        listDelitosParrafo.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosNumeral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosNumeral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
//                    for (int i = 0; i < listDelitosNumeral.size(); i++) {
//                        for (int j = 0; j < listDelitosLiteral.size(); j++) {
//                            if (Objects.equals(listDelitosLiteral.get(j).getDelitosAncestro(),
//                                    listDelitosNumeral.get(i).getCodigoTud())) {
//                                listDelitosLiteral.get(j).setDelitosDetPadre(listDelitosNumeral.get(i).getMovDelitosDetId());
//                                listDelitosLiteral.get(j).setCodigo(listDelitosLiteral.get(j).getCodigo() +
//                                        listDelitosNumeral.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosLiteral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosLiteral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                normaLegalDelitoNuevo.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelitoNuevo.setMovDelito(movDelito);
//                normaLegalDelitoNuevo.setNormaLegal(normaLegal);
//                normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimiento);
//                normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
//                normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelitoNuevo.setFecha(LocalDate.now());
//                normaLegalDelitoNuevo.setUsuario(usuario);
//                normaLegalDelitoNuevo.setFlag("I");
//                relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
//            }
//            else {
//
//
//
//                /*Actualiza los datos de Delito*/
//                movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
//                movDelito.setFecha(LocalDate.now());
//                movDelito.setFlag("U");
//                articuloRepository.save(movDelito);
//
//
//                /*Actualiza el estado del detalle Actual*/
//                MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
//                for (MovDelitosDet delitos : movDelitosDets) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
//                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//                    movDelitosDetRepository.save(delitos);
//                }
//
//                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
//
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleParrafo = maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleNumeral = maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleLiteral = maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));
//                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
//                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
//                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();
//                for (int i = 0; i < movDelitoDTODet.size(); i++) {
//                    if (movDelitoDTODet.get(i).getNivel() == 1) {
//                        MovDelitosDet movDelitosDetParrafo = new MovDelitosDet();
//                        movDelitosDetParrafo.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetParrafo.setDelito(movDelito);
//                        movDelitosDetParrafo.setTipoDelitoDetalle(maeTipoDelitoDetalleParrafo);
//                        movDelitosDetParrafo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + "." + movDelitoDTODet.get(i).getNumeracion() + ".0.0");
//                        movDelitosDetParrafo.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetParrafo.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetParrafo.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetParrafo.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetParrafo.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetParrafo.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setVersion(1);
//                        movDelitosDetParrafo.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetParrafo.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetParrafo.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetParrafo.setFecha(LocalDate.now());
//                        movDelitosDetParrafo.setFlag("I");
//                        movDelitosDetParrafo.setUid("tud");
//                        movDelitosDetParrafo.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetParrafo.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetParrafo.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetParrafo);
//                        listDelitosParrafo.add(movDelitosDetParrafo);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 2) {
//                        MovDelitosDet movDelitosDetNumeral = new MovDelitosDet();
//                        movDelitosDetNumeral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetNumeral.setDelito(movDelito);
//                        movDelitosDetNumeral.setTipoDelitoDetalle(maeTipoDelitoDetalleNumeral);
//                        movDelitosDetNumeral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetNumeral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetNumeral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetNumeral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetNumeral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetNumeral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetNumeral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setVersion(1);
//                        movDelitosDetNumeral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetNumeral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetNumeral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetNumeral.setFecha(LocalDate.now());
//                        movDelitosDetNumeral.setFlag("I");
//                        movDelitosDetNumeral.setUid("tud");
//                        movDelitosDetNumeral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetNumeral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetNumeral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetNumeral);
//                        listDelitosNumeral.add(movDelitosDetNumeral);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 3) {
//                        MovDelitosDet movDelitosDetLiteral = new MovDelitosDet();
//                        movDelitosDetLiteral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetLiteral.setDelito(movDelito);
//                        movDelitosDetLiteral.setTipoDelitoDetalle(maeTipoDelitoDetalleLiteral);
//                        movDelitosDetLiteral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetLiteral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetLiteral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetLiteral.setFechaIniVigencia(movDelitoDTODet.get(i).getFechaInicioVigencia());
//                        movDelitosDetLiteral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetLiteral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetLiteral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setVersion(1);
//                        movDelitosDetLiteral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetLiteral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetLiteral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetLiteral.setFecha(LocalDate.now());
//                        movDelitosDetLiteral.setFlag("I");
//                        movDelitosDetLiteral.setUid("tud");
//                        movDelitosDetLiteral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetLiteral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetLiteral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetLiteral);
//                        listDelitosLiteral.add(movDelitosDetLiteral);
//                        MaxIdDelitoDet++;
//                    }
//                }
//
//                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
//                    for (int i = 0; i < listDelitosParrafo.size(); i++) {
//                        for (int j = 0; j < listDelitosNumeral.size(); j++) {
//                            if (Objects.equals(listDelitosNumeral.get(j).getDelitosAncestro(),
//                                    listDelitosParrafo.get(i).getCodigoTud())) {
//                                listDelitosNumeral.get(j).setDelitosDetPadre(listDelitosParrafo.get(i).getMovDelitosDetId());
//                                listDelitosNumeral.get(j).setCodigo(listDelitosNumeral.get(j).getCodigo() +
//                                        listDelitosParrafo.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosNumeral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosNumeral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
//                    for (int i = 0; i < listDelitosNumeral.size(); i++) {
//                        for (int j = 0; j < listDelitosLiteral.size(); j++) {
//                            if (Objects.equals(listDelitosLiteral.get(j).getDelitosAncestro(),
//                                    listDelitosNumeral.get(i).getCodigoTud())) {
//                                listDelitosLiteral.get(j).setDelitosDetPadre(listDelitosNumeral.get(i).getMovDelitosDetId());
//                                listDelitosLiteral.get(j).setCodigo(listDelitosLiteral.get(j).getCodigo() +
//                                        listDelitosNumeral.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosLiteral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosLiteral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                nuevoNormaLegalDelito.setNormaLegalDelitosId(idnormaLegalDelito);
//                nuevoNormaLegalDelito.setMovDelito(movDelito);
//                nuevoNormaLegalDelito.setNormaLegal(normaLegal);
//                nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
//                nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
//                nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
//                nuevoNormaLegalDelito.setFecha(LocalDate.now());
//                nuevoNormaLegalDelito.setFlag("I");
//                nuevoNormaLegalDelito.setUsuario(usuario);
//                relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);
//            }
//            resultadoDTO.setResultado("Los Datos se guardaron correctamente");
//        }
//        if (normaLegalRequest.getAccion() == 7) {//AcciÃ³n: Derogar Parcial
//            MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.DEROGAR_PARCIAL).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//            MaeTipoMovimiento tipoMovimientoNuevo = maeTipoMovimientoRepository.findById(Constant.NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//            List<MovNormaLegalDelito> normaLegalDelitoList = normaLegalRepository.normaLegalDelitos(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
//            MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
//            MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//
//            if (normaLegalDelitoList.size() > 0) {
//                /*Actualiza el estado del delito*/
//                movDelito.setFecha(LocalDate.now());
//                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
//                movDelito.setFlag("U");
//                articuloRepository.save(movDelito);
//
//                /*Actualiza el estado de normaLegalDelito*/
//                for (int i = 0; i < normaLegalDelitoList.size(); i++) {
//                    normaLegalDelitoList.get(i).setFecha(LocalDate.now());
//                    normaLegalDelitoList.get(i).setFlag("U");
//                    normaLegalDelitoList.get(i).setEstado(Constant.ESTADO_INACTIVO);
//                    relacionNormaDelitoRepository.save(normaLegalDelitoList.get(i));
//                }
//
//                /*Actualiza el estado del detalle Actual*/
//                MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                for (MovDelitosDet delitos : movDelitosDets) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
//                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//                    movDelitosDetRepository.save(delitos);
//                }
//
//                /*Inserta el nuevo Detalle del Delito*/
//                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
//
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleParrafo = maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleNumeral = maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleLiteral = maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));
//                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
//                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
//                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();
//                for (int i = 0; i < movDelitoDTODet.size(); i++) {
//                    if (movDelitoDTODet.get(i).getNivel() == 1) {
//                        MovDelitosDet movDelitosDetParrafo = new MovDelitosDet();
//                        movDelitosDetParrafo.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetParrafo.setDelito(movDelito);
//                        movDelitosDetParrafo.setTipoDelitoDetalle(maeTipoDelitoDetalleParrafo);
//                        movDelitosDetParrafo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + "." + movDelitoDTODet.get(i).getNumeracion() + ".0.0");
//                        movDelitosDetParrafo.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetParrafo.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetParrafo.setFechaIniVigencia(LocalDate.now().format(formatter));
//                        movDelitosDetParrafo.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetParrafo.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetParrafo.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setVersion(1);
//                        movDelitosDetParrafo.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetParrafo.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetParrafo.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetParrafo.setFecha(LocalDate.now());
//                        movDelitosDetParrafo.setFlag("I");
//                        movDelitosDetParrafo.setUid("tud");
//                        movDelitosDetParrafo.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetParrafo.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetParrafo.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetParrafo);
//                        listDelitosParrafo.add(movDelitosDetParrafo);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 2) {
//                        MovDelitosDet movDelitosDetNumeral = new MovDelitosDet();
//                        movDelitosDetNumeral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetNumeral.setDelito(movDelito);
//                        movDelitosDetNumeral.setTipoDelitoDetalle(maeTipoDelitoDetalleNumeral);
//                        movDelitosDetNumeral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetNumeral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetNumeral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetNumeral.setFechaIniVigencia(LocalDate.now().format(formatter));
//                        movDelitosDetNumeral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetNumeral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetNumeral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setVersion(1);
//                        movDelitosDetNumeral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetNumeral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetNumeral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetNumeral.setFecha(LocalDate.now());
//                        movDelitosDetNumeral.setFlag("I");
//                        movDelitosDetNumeral.setUid("tud");
//                        movDelitosDetNumeral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetNumeral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetNumeral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetNumeral);
//                        listDelitosNumeral.add(movDelitosDetNumeral);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 3) {
//                        MovDelitosDet movDelitosDetLiteral = new MovDelitosDet();
//                        movDelitosDetLiteral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetLiteral.setDelito(movDelito);
//                        movDelitosDetLiteral.setTipoDelitoDetalle(maeTipoDelitoDetalleLiteral);
//                        movDelitosDetLiteral.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + ".");
//                        movDelitosDetLiteral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetLiteral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetLiteral.setFechaIniVigencia(LocalDate.now().format(formatter));
//                        movDelitosDetLiteral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetLiteral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetLiteral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setVersion(1);
//                        movDelitosDetLiteral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetLiteral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetLiteral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetLiteral.setFecha(LocalDate.now());
//                        movDelitosDetLiteral.setFlag("I");
//                        movDelitosDetLiteral.setUid("tud");
//                        movDelitosDetLiteral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetLiteral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetLiteral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetLiteral);
//                        listDelitosLiteral.add(movDelitosDetLiteral);
//                        MaxIdDelitoDet++;
//                    }
//                }
//
//                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
//                    for (int i = 0; i < listDelitosParrafo.size(); i++) {
//                        for (int j = 0; j < listDelitosNumeral.size(); j++) {
//                            if (Objects.equals(listDelitosNumeral.get(j).getDelitosAncestro(),
//                                    listDelitosParrafo.get(i).getCodigoTud())) {
//                                listDelitosNumeral.get(j).setDelitosDetPadre(listDelitosParrafo.get(i).getMovDelitosDetId());
//                                listDelitosNumeral.get(j).setCodigo(listDelitosNumeral.get(j).getCodigo() +
//                                        listDelitosParrafo.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosNumeral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosNumeral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
//                    for (int i = 0; i < listDelitosNumeral.size(); i++) {
//                        for (int j = 0; j < listDelitosLiteral.size(); j++) {
//                            if (Objects.equals(listDelitosLiteral.get(j).getDelitosAncestro(),
//                                    listDelitosNumeral.get(i).getCodigoTud())) {
//                                listDelitosLiteral.get(j).setDelitosDetPadre(listDelitosNumeral.get(i).getMovDelitosDetId());
//                                listDelitosLiteral.get(j).setCodigo(listDelitosLiteral.get(j).getCodigo() +
//                                        listDelitosNumeral.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosLiteral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosLiteral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                /*Inserta Relacion de Delito Nuevo*/
//                MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
//                normaLegalDelitoNuevo.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelitoNuevo.setMovDelito(movDelito);
//                normaLegalDelitoNuevo.setNormaLegal(normaLegal);
//                normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimiento);
//                normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
//                normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelitoNuevo.setFecha(LocalDate.now());
//                normaLegalDelitoNuevo.setFlag("I");
//                relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
//            }
//            else {
//                MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//
//                /*Actualiza el estado del detalle Actual*/
//                List<MovDelitosDet> movDelitosDetsActual = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
//                for (MovDelitosDet delitos : movDelitosDetsActual) {
//                    delitos.setEstadoDelitoDetalle(0);
//                    delitos.setEstado(Constant.ESTADO_INACTIVO);
//                    delitos.setVigente(Constant.ESTADO_INACTIVO);
//                    delitos.setFecha(LocalDate.now());
//                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
//                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//                    movDelitosDetRepository.save(delitos);
//                }
//
//                /*Inserta Relacion de Delito Actual*/
//                MovNormaLegalDelito normaLegalDelitoActual = new MovNormaLegalDelito();
//                normaLegalDelitoActual.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelitoActual.setMovDelito(movDelito);
//                normaLegalDelitoActual.setNormaLegal(normaLegal);
//                normaLegalDelitoActual.setTipoMovimiento(tipoMovimiento);
//                normaLegalDelitoActual.setFechaRegistro(LocalDate.now());
//                normaLegalDelitoActual.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelitoActual.setFecha(LocalDate.now());
//                normaLegalDelitoActual.setFlag("I");
//                relacionNormaDelitoRepository.save(normaLegalDelitoActual);
//                idnormaLegalDelito++;
//
//                /*Inserta Detalle de Delito Nuevo*/
//                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
//
//                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
//
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleParrafo = maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleNumeral = maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeTipoDelitoDetalle maeTipoDelitoDetalleLiteral = maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
//                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));
//                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
//                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
//                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();
//                for (int i = 0; i < movDelitoDTODet.size(); i++) {
//                    if (movDelitoDTODet.get(i).getNivel() == 1) {
//                        MovDelitosDet movDelitosDetParrafo = new MovDelitosDet();
//                        movDelitosDetParrafo.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetParrafo.setDelito(movDelito);
//                        movDelitosDetParrafo.setTipoDelitoDetalle(maeTipoDelitoDetalleParrafo);
//                        movDelitosDetParrafo.setCodigo(movDelito.getCodigo().trim() + "." + movDelitoDTODet.get(i).getNumeracion() + ".0.0");
//                        movDelitosDetParrafo.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetParrafo.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetParrafo.setFechaIniVigencia(LocalDate.now().format(formatter));
//                        movDelitosDetParrafo.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetParrafo.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetParrafo.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setVersion(1);
//                        movDelitosDetParrafo.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetParrafo.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetParrafo.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetParrafo.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetParrafo.setFecha(LocalDate.now());
//                        movDelitosDetParrafo.setFlag("I");
//                        movDelitosDetParrafo.setUid("tud");
//                        movDelitosDetParrafo.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetParrafo.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetParrafo.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetParrafo);
//                        listDelitosParrafo.add(movDelitosDetParrafo);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 2) {
//                        MovDelitosDet movDelitosDetNumeral = new MovDelitosDet();
//                        movDelitosDetNumeral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetNumeral.setDelito(movDelito);
//                        movDelitosDetNumeral.setTipoDelitoDetalle(maeTipoDelitoDetalleNumeral);
//                        movDelitosDetNumeral.setCodigo(movDelito.getCodigo().trim() + ".");
//                        movDelitosDetNumeral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetNumeral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetNumeral.setFechaIniVigencia(LocalDate.now().format(formatter));
//                        movDelitosDetNumeral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetNumeral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetNumeral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setVersion(1);
//                        movDelitosDetNumeral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetNumeral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetNumeral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetNumeral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetNumeral.setFecha(LocalDate.now());
//                        movDelitosDetNumeral.setFlag("I");
//                        movDelitosDetNumeral.setUid("tud");
//                        movDelitosDetNumeral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetNumeral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetNumeral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetNumeral);
//                        listDelitosNumeral.add(movDelitosDetNumeral);
//                        MaxIdDelitoDet++;
//                    }
//                    if (movDelitoDTODet.get(i).getNivel() == 3) {
//                        MovDelitosDet movDelitosDetLiteral = new MovDelitosDet();
//                        movDelitosDetLiteral.setMovDelitosDetId(MaxIdDelitoDet);
//                        movDelitosDetLiteral.setDelito(movDelito);
//                        movDelitosDetLiteral.setTipoDelitoDetalle(maeTipoDelitoDetalleLiteral);
//                        movDelitosDetLiteral.setCodigo(movDelito.getCodigo().trim() + ".");
//                        movDelitosDetLiteral.setPenaMin(movDelitoDTODet.get(i).getPenaMin());
//                        movDelitosDetLiteral.setPenaMax(movDelitoDTODet.get(i).getPenaMax());
//                        movDelitosDetLiteral.setFechaIniVigencia(LocalDate.now().format(formatter));
//                        movDelitosDetLiteral.setFechaFinVigencia(Constant.ACTIVO);
//                        movDelitosDetLiteral.setModificado(movDelitoDTODet.get(i).getFlagModificado());
//                        movDelitosDetLiteral.setEstado(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setVersion(1);
//                        movDelitosDetLiteral.setVigente(Constant.ESTADO_ACTIVO);
//                        movDelitosDetLiteral.setCodigoDelito(movDelitoDTODet.get(i).getNumeracion());
//                        movDelitosDetLiteral.setDescripcionDelito(movDelitoDTODet.get(i).getNombre());
//                        movDelitosDetLiteral.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
//                        movDelitosDetLiteral.setFecha(LocalDate.now());
//                        movDelitosDetLiteral.setFlag("I");
//                        movDelitosDetLiteral.setUid("tud");
//                        movDelitosDetLiteral.setCodigoTud(movDelitoDTODet.get(i).getId());
//                        movDelitosDetLiteral.setDelitosAncestro(movDelitoDTODet.get(i).getIdRef());
//                        movDelitosDetLiteral.setEstadoDelitoDetalle(1);
//                        movDelitosDetRepository.save(movDelitosDetLiteral);
//                        listDelitosLiteral.add(movDelitosDetLiteral);
//                        MaxIdDelitoDet++;
//                    }
//                }
//
//                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
//                    for (int i = 0; i < listDelitosParrafo.size(); i++) {
//                        for (int j = 0; j < listDelitosNumeral.size(); j++) {
//                            if (Objects.equals(listDelitosNumeral.get(j).getDelitosAncestro(),
//                                    listDelitosParrafo.get(i).getCodigoTud())) {
//                                listDelitosNumeral.get(j).setDelitosDetPadre(listDelitosParrafo.get(i).getMovDelitosDetId());
//                                listDelitosNumeral.get(j).setCodigo(listDelitosNumeral.get(j).getCodigo() +
//                                        listDelitosParrafo.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosNumeral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosNumeral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
//                    for (int i = 0; i < listDelitosNumeral.size(); i++) {
//                        for (int j = 0; j < listDelitosLiteral.size(); j++) {
//                            if (Objects.equals(listDelitosLiteral.get(j).getDelitosAncestro(),
//                                    listDelitosNumeral.get(i).getCodigoTud())) {
//                                listDelitosLiteral.get(j).setDelitosDetPadre(listDelitosNumeral.get(i).getMovDelitosDetId());
//                                listDelitosLiteral.get(j).setCodigo(listDelitosLiteral.get(j).getCodigo() +
//                                        listDelitosNumeral.get(i).getCodigoDelito().trim() + "." +
//                                        listDelitosLiteral.get(j).getCodigoDelito().trim() + "0");
//                                movDelitosDetRepository.save(listDelitosLiteral.get(j));
//                            }
//                        }
//                    }
//                }
//
//                /*Inserta Relacion de Delito Nuevo*/
//                MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
//                normaLegalDelitoNuevo.setNormaLegalDelitosId(idnormaLegalDelito);
//                normaLegalDelitoNuevo.setMovDelito(movDelito);
//                normaLegalDelitoNuevo.setNormaLegal(normaLegal);
//                normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimientoNuevo);
//                normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
//                normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
//                normaLegalDelitoNuevo.setFecha(LocalDate.now());
//                normaLegalDelitoNuevo.setFlag("I");
//                relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
//            }
//            resultadoDTO.setResultado("Los Datos se guardaron correctamente");
//        }
//        return resultadoDTO;
//    }

    /*nuevo*/

    @Override
    public ResultadoDTO validarNormaLegal(NormaLegalRequest normaLegalRequest, String codigoUsuario) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
        ResultadoDTO resultadoDTO = new ResultadoDTO();
        Long idnormaLegalDelito = relacionNormaDelitoRepository.MaxId();
        MovNormaLegal normaLegal = normaLegalRepository.findById(normaLegalRequest.getDecretoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_NORMA_NO_ENCONTRADA));
        Long MaxIdDelito = articuloRepository.MaxDelitos();
        Usuario usuario = usuarioRepository.buscarUsuarioxCodigo(codigoUsuario);

        if (idnormaLegalDelito == null) {
            idnormaLegalDelito = 1L;
        }

        switch (normaLegalRequest.getAccion()) {
            case 3:
                incorporarValidador(normaLegalRequest, normaLegal, idnormaLegalDelito, MaxIdDelito, usuario, formatter);
                break; //fa
            case 6:
                derogarTotalValidador(normaLegalRequest, normaLegal, idnormaLegalDelito, MaxIdDelito, usuario, formatter);
                break; //ok
            case 4:
                reubicarValidador(normaLegalRequest, normaLegal, idnormaLegalDelito, MaxIdDelito, usuario, formatter);
                break; //ok
            case 2:
                modificarValidador(normaLegalRequest, normaLegal, idnormaLegalDelito, MaxIdDelito, usuario, formatter);
                break;
            case 7:
                derogarParcialValidador(normaLegalRequest, normaLegal, idnormaLegalDelito, MaxIdDelito, usuario, formatter);
                break;//ok, por factorizar
            default:
                throw new UnsupportedOperationException("AcciÃ³n no soportada.");
        }

        resultadoDTO.setResultado("Los Datos se guardaron correctamente");
        return resultadoDTO;
    }

    private void incorporarValidador(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, Long MaxIdDelito, Usuario usuario, DateTimeFormatter formatter) {
        MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.INCORPORAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));

        if (normaLegalRequest.getDelitoId() != null) {
            actualizarEstadoDelitoValidador(normaLegalRequest, estadoDelitoAprobado, formatter);

            List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
            Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();

            List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
            List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
            List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();

            procesarDetallesDelitoValidador(normaLegalRequest, movDelitoDTODet, MaxIdDelitoDet, listDelitosParrafo, listDelitosNumeral, listDelitosLiteral, formatter);

            relacionarDelitosValidador(listDelitosParrafo, listDelitosNumeral);
            relacionarDelitosValidador(listDelitosNumeral, listDelitosLiteral);

            MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
            normaLegalDelito.setFecha(LocalDate.now());
            relacionNormaDelitoRepository.save(normaLegalDelito);
        } else {
            crearNuevoDelitoValidador(normaLegalRequest, estadoDelitoAprobado, MaxIdDelito, idnormaLegalDelito, normaLegal, tipoMovimiento, formatter);
        }
    }


    private void derogarTotalValidador(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, Long MaxIdDelito, Usuario usuario, DateTimeFormatter formatter) {
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.DEROGAR_TOTAL).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
        MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
        MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));

        if (normaLegalDelito != null) {
            actualizarEstadoDelitoYRelacionValidador(normaLegalRequest, normaLegalDelito, movDelito, estadoDelitoAprobado, formatter);
        } else {
            actualizarEstadoDetallesActualValidador(normaLegalRequest, movDelito, estadoDelitoAprobado, formatter);
            crearNuevaRelacionNormaLegalDelitoValidador(normaLegalRequest, normaLegal, idnormaLegalDelito, movDelito, tipoMovimiento, formatter);
        }
    }

    private void actualizarEstadoDelitoYRelacionValidador(NormaLegalRequest normaLegalRequest, MovNormaLegalDelito normaLegalDelito, MovDelito movDelito, MaeEstadoDelito estadoDelitoAprobado, DateTimeFormatter formatter) {
        movDelito.setFecha(LocalDate.parse(normaLegalRequest.getDelito().getCabArticulo().getFechaRegistro(), formatter));
        movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
        movDelito.setFlag("U");
        articuloRepository.save(movDelito);

        normaLegalDelito.setFecha(LocalDate.now());
        normaLegalDelito.setFlag("U");
        relacionNormaDelitoRepository.save(normaLegalDelito);

        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
        for (MovDelitosDet delitos : movDelitosDets) {
            delitos.setFecha(LocalDate.now());
            delitos.setFechaFinVigencia(normaLegalRequest.getDelito().getCabArticulo().getFechaRegistro());
            movDelitosDetRepository.save(delitos);
        }
    }

    private void crearNuevaRelacionNormaLegalDelitoValidador(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, MovDelito movDelito, MaeTipoMovimiento tipoMovimiento, DateTimeFormatter formatter) {
        MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
        nuevoNormaLegalDelito.setNormaLegalDelitosId(idnormaLegalDelito);
        nuevoNormaLegalDelito.setMovDelito(movDelito);
        nuevoNormaLegalDelito.setNormaLegal(normaLegal);
        nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
        nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
        nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
        nuevoNormaLegalDelito.setFecha(LocalDate.now());
        nuevoNormaLegalDelito.setFlag("I");
        relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);
    }

    private void reubicarValidador(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, Long MaxIdDelito, Usuario usuario, DateTimeFormatter formatter) {
            //MovNormaLegalDelito normaLegalDelito = new MovNormaLegalDelito();
            MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.REUBICAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            MaeTipoMovimiento tipoMovimientoNuevo = maeTipoMovimientoRepository.findById(Constant.NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
            MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));

            if (normaLegalDelito != null) {
                //actualizarEstadoRelacionNormaLegalDelitoValidador(normaLegalDelito, tipoMovimiento, formatter);
                /*Actualiza el estado relacion normaLegalDelito*/
                normaLegalDelito.setEstado(Constant.ESTADO_INACTIVO);
                normaLegalDelito.setFecha(LocalDate.now());
                normaLegalDelito.setFlag("U");
                relacionNormaDelitoRepository.save(normaLegalDelito);

                actualizarEstadoRelacionNormaLegalDelitoReferencia(normaLegalRequest, usuario);
                insertarRelacionDelitoActual(normaLegalRequest, normaLegal, idnormaLegalDelito, movDelito, tipoMovimiento);

                insertarNuevaRelacionYDetalleDelitoValidador(normaLegalRequest, MaxIdDelito, tipoMovimientoNuevo, normaLegal, formatter);
                actualizarEstadoCabeceraYDetalleDelitoActual(normaLegalRequest, movDelito, formatter);
            } else {
                insertarRelacionYDetalleActualValidador(normaLegalRequest, MaxIdDelito, movDelito, tipoMovimiento, formatter, idnormaLegalDelito, normaLegal, usuario);
                actualizarEstadoCabeceraYDetalleDelitoActual(normaLegalRequest, movDelito, formatter);
            }
    }
    private void insertarRelacionDelitoActual(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, MovDelito movDelito, MaeTipoMovimiento tipoMovimiento) {
        MovNormaLegalDelito normaLegalDelitoActual = new MovNormaLegalDelito();
        normaLegalDelitoActual.setNormaLegalDelitosId(idnormaLegalDelito);
        normaLegalDelitoActual.setMovDelito(movDelito);
        normaLegalDelitoActual.setNormaLegal(normaLegal);
        normaLegalDelitoActual.setTipoMovimiento(tipoMovimiento);
        normaLegalDelitoActual.setFechaRegistro(LocalDate.now());
        normaLegalDelitoActual.setEstado(Constant.ESTADO_ACTIVO);
        normaLegalDelitoActual.setFecha(LocalDate.now());
        normaLegalDelitoActual.setFlag("I");
        relacionNormaDelitoRepository.save(normaLegalDelitoActual);
    }

    private void actualizarEstadoRelacionNormaLegalDelitoReferencia(NormaLegalRequest normaLegalRequest, Usuario usuario) {
        MovNormaLegalDelito normaLegalDelitoReferencia = normaLegalRepository.normaLegalDelitoReferencia(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
        normaLegalDelitoReferencia.setEstado(Constant.ESTADO_INACTIVO);
        normaLegalDelitoReferencia.setFecha(LocalDate.now());
        normaLegalDelitoReferencia.setFlag("U");
        normaLegalDelitoReferencia.setUsuario(usuario);
        relacionNormaDelitoRepository.save(normaLegalDelitoReferencia);
    }

    private void actualizarEstadoCabeceraYDetalleDelitoActual(NormaLegalRequest normaLegalRequest, MovDelito movDelito, DateTimeFormatter formatter) {
        //MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
        movDelito.setFecha(LocalDate.now());
        movDelito.setFlag("U");
        articuloRepository.save(movDelito);

        /*Actualiza el estado del detalle Actual*/
        List<MovDelitosDet> movDelitosDetsActual = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
        for (MovDelitosDet delitos : movDelitosDetsActual) {
            delitos.setEstadoDelitoDetalle(0);
            delitos.setEstado(Constant.ESTADO_INACTIVO);
            delitos.setVigente(Constant.ESTADO_INACTIVO);
            delitos.setFecha(LocalDate.now());
            delitos.setEstadoDelitosDet(estadoDelitoArchivado);
            delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
            movDelitosDetRepository.save(delitos);
        }
    }

    private void modificarValidador(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, Long MaxIdDelito, Usuario usuario, DateTimeFormatter formatter) {
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.MODIFICAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
        MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
        MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));

        if (normaLegalDelito != null) {
            actualizarEstadoDelitoValidador(normaLegalRequest, estadoDelitoAprobado, formatter);
            insertarNuevaRelacionDelitoValidador(normaLegalRequest, MaxIdDelito, tipoMovimiento, normaLegal, formatter);
        } else {
            actualizarDatosDelitoValidador(normaLegalRequest, movDelito, formatter);
            actualizarEstadoDetallesActualValidador(normaLegalRequest, movDelito, estadoDelitoAprobado, formatter);
        }
    }

//    private void derogarParcialValidador(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, Long MaxIdDelito, Usuario usuario, DateTimeFormatter formatter) {
//        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.DEROGAR_PARCIAL).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//        MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
//        MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
//        MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//
//        if (normaLegalDelito != null) {
//            actualizarEstadoDelitoValidador(normaLegalRequest, estadoDelitoAprobado, formatter);
//            insertarNuevaRelacionDelitoValidador(normaLegalRequest, MaxIdDelito, tipoMovimiento, normaLegal, formatter);
//        } else {
//            actualizarDatosDelitoValidador(normaLegalRequest, movDelito, formatter);
//            actualizarEstadoDetallesActualValidador(normaLegalRequest, movDelito, estadoDelitoAprobado, formatter);
//        }
//    }

    private void derogarParcialValidador(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Long idnormaLegalDelito, Long MaxIdDelito, Usuario usuario, DateTimeFormatter formatter) {
            MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.DEROGAR_PARCIAL).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            MaeTipoMovimiento tipoMovimientoNuevo = maeTipoMovimientoRepository.findById(Constant.NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            List<MovNormaLegalDelito> normaLegalDelitoList = normaLegalRepository.normaLegalDelitos(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
            MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));
            MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));

            if (!normaLegalDelitoList.isEmpty()) {
                // Actualiza el estado del delito
                movDelito.setFecha(LocalDate.now());
                movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
                movDelito.setFlag("U");
                articuloRepository.save(movDelito);

                // Actualiza el estado de normaLegalDelito
                for (MovNormaLegalDelito normaLegalDelito : normaLegalDelitoList) {
                    normaLegalDelito.setFecha(LocalDate.now());
                    normaLegalDelito.setFlag("U");
                    normaLegalDelito.setEstado(Constant.ESTADO_INACTIVO);
                    relacionNormaDelitoRepository.save(normaLegalDelito);
                }

                // Actualiza el estado del detalle Actual
                List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
                for (MovDelitosDet delitos : movDelitosDets) {
                    delitos.setEstadoDelitoDetalle(0);
                    delitos.setEstado(Constant.ESTADO_INACTIVO);
                    delitos.setVigente(Constant.ESTADO_INACTIVO);
                    delitos.setFecha(LocalDate.now());
                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
                    movDelitosDetRepository.save(delitos);
                }

                // Inserta el nuevo Detalle del Delito
                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));

                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();

                for (DetalleArticuloDTO detalle : movDelitoDTODet) {
                    MovDelitosDet movDelitosDet = new MovDelitosDet();
                    movDelitosDet.setMovDelitosDetId(MaxIdDelitoDet);
                    movDelitosDet.setDelito(movDelito);
                    movDelitosDet.setTipoDelitoDetalle(obtenerTipoDelitoDetalle(detalle.getNivel()));
                    movDelitosDet.setCodigo(generarCodigoDelito(detalle, movDelito));
                    movDelitosDet.setPenaMin(detalle.getPenaMin());
                    movDelitosDet.setPenaMax(detalle.getPenaMax());
                    movDelitosDet.setFechaIniVigencia(LocalDate.now().format(formatter));
                    movDelitosDet.setFechaFinVigencia(Constant.ACTIVO);
                    movDelitosDet.setModificado(detalle.getFlagModificado());
                    movDelitosDet.setEstado(Constant.ESTADO_ACTIVO);
                    movDelitosDet.setVersion(1);
                    movDelitosDet.setVigente(Constant.ESTADO_ACTIVO);
                    movDelitosDet.setCodigoDelito(detalle.getNumeracion());
                    movDelitosDet.setDescripcionDelito(detalle.getNombre());
                    movDelitosDet.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
                    movDelitosDet.setFecha(LocalDate.now());
                    movDelitosDet.setFlag("I");
                    movDelitosDet.setUid("tud");
                    movDelitosDet.setCodigoTud(detalle.getId());
                    movDelitosDet.setDelitosAncestro(detalle.getIdRef());
                    movDelitosDet.setEstadoDelitoDetalle(1);
                    movDelitosDetRepository.save(movDelitosDet);

                    if (detalle.getNivel() == 1) {
                        listDelitosParrafo.add(movDelitosDet);
                    } else if (detalle.getNivel() == 2) {
                        listDelitosNumeral.add(movDelitosDet);
                    } else if (detalle.getNivel() == 3) {
                        listDelitosLiteral.add(movDelitosDet);
                    }

                    MaxIdDelitoDet++;
                }

                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
                    for (MovDelitosDet parrafo : listDelitosParrafo) {
                        for (MovDelitosDet numeral : listDelitosNumeral) {
                            if (Objects.equals(numeral.getDelitosAncestro(), parrafo.getCodigoTud())) {
                                numeral.setDelitosDetPadre(parrafo.getMovDelitosDetId());
                                numeral.setCodigo(numeral.getCodigo() + parrafo.getCodigoDelito().trim() + "." + numeral.getCodigoDelito().trim() + "0");
                                movDelitosDetRepository.save(numeral);
                            }
                        }
                    }
                }

                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
                    for (MovDelitosDet numeral : listDelitosNumeral) {
                        for (MovDelitosDet literal : listDelitosLiteral) {
                            if (Objects.equals(literal.getDelitosAncestro(), numeral.getCodigoTud())) {
                                literal.setDelitosDetPadre(numeral.getMovDelitosDetId());
                                literal.setCodigo(literal.getCodigo() + numeral.getCodigoDelito().trim() + "." + literal.getCodigoDelito().trim() + "0");
                                movDelitosDetRepository.save(literal);
                            }
                        }
                    }
                }

                // Inserta Relacion de Delito Nuevo
                MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
                normaLegalDelitoNuevo.setNormaLegalDelitosId(idnormaLegalDelito);
                normaLegalDelitoNuevo.setMovDelito(movDelito);
                normaLegalDelitoNuevo.setNormaLegal(normaLegal);
                normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimiento);
                normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
                normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
                normaLegalDelitoNuevo.setFecha(LocalDate.now());
                normaLegalDelitoNuevo.setFlag("I");
                relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
            } else {
                // Actualiza el estado del detalle Actual
                List<MovDelitosDet> movDelitosDetsActual = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
                for (MovDelitosDet delitos : movDelitosDetsActual) {
                    delitos.setEstadoDelitoDetalle(0);
                    delitos.setEstado(Constant.ESTADO_INACTIVO);
                    delitos.setVigente(Constant.ESTADO_INACTIVO);
                    delitos.setFecha(LocalDate.now());
                    delitos.setEstadoDelitosDet(estadoDelitoArchivado);
                    delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
                    movDelitosDetRepository.save(delitos);
                }

                // Inserta Relacion de Delito Actual
                MovNormaLegalDelito normaLegalDelitoActual = new MovNormaLegalDelito();
                normaLegalDelitoActual.setNormaLegalDelitosId(idnormaLegalDelito);
                normaLegalDelitoActual.setMovDelito(movDelito);
                normaLegalDelitoActual.setNormaLegal(normaLegal);
                normaLegalDelitoActual.setTipoMovimiento(tipoMovimiento);
                normaLegalDelitoActual.setFechaRegistro(LocalDate.now());
                normaLegalDelitoActual.setEstado(Constant.ESTADO_ACTIVO);
                normaLegalDelitoActual.setFecha(LocalDate.now());
                normaLegalDelitoActual.setFlag("I");
                relacionNormaDelitoRepository.save(normaLegalDelitoActual);
                idnormaLegalDelito++;

                // Inserta Detalle de Delito Nuevo
                List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
                Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();

                MaeTipoDelitoDetalle maeTipoDelitoDetalleParrafo = maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
                MaeTipoDelitoDetalle maeTipoDelitoDetalleNumeral = maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
                MaeTipoDelitoDetalle maeTipoDelitoDetalleLiteral = maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
                MaeEstadoDelitosDet maeEstadoDelitosDetRegistrado = maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado"));

                List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
                List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
                List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();

                for (DetalleArticuloDTO detalle : movDelitoDTODet) {
                    MovDelitosDet movDelitosDet = new MovDelitosDet();
                    movDelitosDet.setMovDelitosDetId(MaxIdDelitoDet);
                    movDelitosDet.setDelito(movDelito);
                    movDelitosDet.setTipoDelitoDetalle(obtenerTipoDelitoDetalle(detalle.getNivel()));
                    movDelitosDet.setCodigo(generarCodigoDelito(detalle, movDelitosDet.getDelito()));
                    movDelitosDet.setPenaMin(detalle.getPenaMin());
                    movDelitosDet.setPenaMax(detalle.getPenaMax());
                    movDelitosDet.setFechaIniVigencia(LocalDate.now().format(formatter));
                    movDelitosDet.setFechaFinVigencia(Constant.ACTIVO);
                    movDelitosDet.setModificado(detalle.getFlagModificado());
                    movDelitosDet.setEstado(Constant.ESTADO_ACTIVO);
                    movDelitosDet.setVersion(1);
                    movDelitosDet.setVigente(Constant.ESTADO_ACTIVO);
                    movDelitosDet.setCodigoDelito(detalle.getNumeracion());
                    movDelitosDet.setDescripcionDelito(detalle.getNombre());
                    movDelitosDet.setEstadoDelitosDet(maeEstadoDelitosDetRegistrado);
                    movDelitosDet.setFecha(LocalDate.now());
                    movDelitosDet.setFlag("I");
                    movDelitosDet.setUid("tud");
                    movDelitosDet.setCodigoTud(detalle.getId());
                    movDelitosDet.setDelitosAncestro(detalle.getIdRef());
                    movDelitosDet.setEstadoDelitoDetalle(1);
                    movDelitosDetRepository.save(movDelitosDet);

                    if (detalle.getNivel() == 1) {
                        listDelitosParrafo.add(movDelitosDet);
                    } else if (detalle.getNivel() == 2) {
                        listDelitosNumeral.add(movDelitosDet);
                    } else if (detalle.getNivel() == 3) {
                        listDelitosLiteral.add(movDelitosDet);
                    }

                    MaxIdDelitoDet++;
                }

                if (!listDelitosParrafo.isEmpty() && !listDelitosNumeral.isEmpty()) {
                    for (MovDelitosDet parrafo : listDelitosParrafo) {
                        for (MovDelitosDet numeral : listDelitosNumeral) {
                            if (Objects.equals(numeral.getDelitosAncestro(), parrafo.getCodigoTud())) {
                                numeral.setDelitosDetPadre(parrafo.getMovDelitosDetId());
                                numeral.setCodigo(numeral.getCodigo() + parrafo.getCodigoDelito().trim() + "." + numeral.getCodigoDelito().trim() + "0");
                                movDelitosDetRepository.save(numeral);
                            }
                        }
                    }
                }

                if (!listDelitosNumeral.isEmpty() && !listDelitosLiteral.isEmpty()) {
                    for (MovDelitosDet numeral : listDelitosNumeral) {
                        for (MovDelitosDet literal : listDelitosLiteral) {
                            if (Objects.equals(literal.getDelitosAncestro(), numeral.getCodigoTud())) {
                                literal.setDelitosDetPadre(numeral.getMovDelitosDetId());
                                literal.setCodigo(literal.getCodigo() + numeral.getCodigoDelito().trim() + "." + literal.getCodigoDelito().trim() + "0");
                                movDelitosDetRepository.save(literal);
                            }
                        }
                    }
                }

                // Inserta Relacion de Delito Nuevo
                MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
                normaLegalDelitoNuevo.setNormaLegalDelitosId(idnormaLegalDelito);
                normaLegalDelitoNuevo.setMovDelito(movDelito);
                normaLegalDelitoNuevo.setNormaLegal(normaLegal);
                normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimientoNuevo);
                normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
                normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
                normaLegalDelitoNuevo.setFecha(LocalDate.now());
                normaLegalDelitoNuevo.setFlag("I");
                relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
            }
    }

    private MaeTipoDelitoDetalle obtenerTipoDelitoDetalle(int nivel) {
        switch (nivel) {
            case 1:
                return maeTipoDelitoDetalleRepository.findById(Constant.PARRAFO).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
            case 2:
                return maeTipoDelitoDetalleRepository.findById(Constant.NUMERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
            case 3:
                return maeTipoDelitoDetalleRepository.findById(Constant.LITERAL).orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado"));
            default:
                throw new IllegalArgumentException("Nivel de delito no vÃ¡lido");
        }
    }

    private String generarCodigoDelito(DetalleArticuloDTO detalle, MovDelito movDelito) {
        return movDelito.getCodigo().trim() + "." + detalle.getNumeracion() + ".0.0";
    }

    private MaeTipoMovimiento obtenerTipoMovimiento(Long id) {
        return maeTipoMovimientoRepository.findById(id).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
    }
    private MaeEstadoDelitosDet obtenerEstadoDelitosDet(Long id) {
        return maeEstadoDelitoDetRepository.findById(id).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
    }

    private void actualizarEstadoDelitoValidador(NormaLegalRequest normaLegalRequest, MaeEstadoDelito estadoDelitoAprobado, DateTimeFormatter formatter) {
        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
        MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        movDelito.setFecha(LocalDate.now());
        movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
        movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
        movDelito.setFlag("U");
        articuloRepository.save(movDelito);

        movDelitosDets.forEach(delitos -> {
            delitos.setEstadoDelitoDetalle(0);
            delitos.setEstado(Constant.ESTADO_INACTIVO);
            delitos.setVigente(Constant.ESTADO_INACTIVO);
            delitos.setFecha(LocalDate.now());
            delitos.setEstadoDelitosDet(maeEstadoDelitoDetRepository.findById(Constant.ELIMINAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO)));
            delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
            movDelitosDetRepository.save(delitos);
        });
    }

    private void insertarNuevaRelacionDelitoValidador(NormaLegalRequest normaLegalRequest, Long MaxIdDelito, MaeTipoMovimiento tipoMovimiento, MovNormaLegal normaLegal, DateTimeFormatter formatter) {
        MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
        List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
        Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();

        List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
        List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
        List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();

        procesarDetallesDelitoValidador(normaLegalRequest, movDelitoDTODet, MaxIdDelitoDet, listDelitosParrafo, listDelitosNumeral, listDelitosLiteral, formatter);
        relacionarDelitosValidador(listDelitosParrafo, listDelitosNumeral);
        relacionarDelitosValidador(listDelitosNumeral, listDelitosLiteral);

        MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        normaLegalDelitoNuevo.setNormaLegalDelitosId(MaxIdDelito);
        normaLegalDelitoNuevo.setMovDelito(movDelito);
        normaLegalDelitoNuevo.setNormaLegal(normaLegal);
        normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimiento);
        normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
        normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
        normaLegalDelitoNuevo.setFecha(LocalDate.now());
        normaLegalDelitoNuevo.setFlag("I");
        relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
    }

    private void actualizarDatosDelitoValidador(NormaLegalRequest normaLegalRequest, MovDelito movDelito, DateTimeFormatter formatter) {
        movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
        movDelito.setFlag("U");
        movDelito.setFecha(LocalDate.now());
        articuloRepository.save(movDelito);
    }

    private void actualizarEstadoDetallesActualValidador(NormaLegalRequest normaLegalRequest, MovDelito movDelito, MaeEstadoDelito estadoDelitoAprobado, DateTimeFormatter formatter) {
        MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());

        for (MovDelitosDet delitos : movDelitosDets) {
            delitos.setEstadoDelitoDetalle(0);
            delitos.setEstado(Constant.ESTADO_INACTIVO);
            delitos.setVigente(Constant.ESTADO_INACTIVO);
            delitos.setFecha(LocalDate.now());
            delitos.setEstadoDelitosDet(estadoDelitoArchivado);
            delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
            movDelitosDetRepository.save(delitos);
        }
    }

    private void procesarDetallesDelitoValidador(NormaLegalRequest normaLegalRequest, List<DetalleArticuloDTO> movDelitoDTODet, Long MaxIdDelitoDet, List<MovDelitosDet> listDelitosParrafo, List<MovDelitosDet> listDelitosNumeral, List<MovDelitosDet> listDelitosLiteral, DateTimeFormatter formatter) {
        for (DetalleArticuloDTO detalle : movDelitoDTODet) {
            MovDelitosDet movDelitosDet = new MovDelitosDet();
            movDelitosDet.setMovDelitosDetId(MaxIdDelitoDet);
            movDelitosDet.setDelito(articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO)));
            movDelitosDet.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo() + "." + detalle.getNumeracion() + ".0.0");
            movDelitosDet.setPenaMin(detalle.getPenaMin());
            movDelitosDet.setPenaMax(detalle.getPenaMax());
            movDelitosDet.setFechaIniVigencia(detalle.getFechaInicioVigencia());
            movDelitosDet.setFechaFinVigencia(Constant.ACTIVO);
            movDelitosDet.setModificado(detalle.getFlagModificado());
            movDelitosDet.setEstado(Constant.ESTADO_ACTIVO);
            movDelitosDet.setVersion(1);
            movDelitosDet.setVigente(Constant.ESTADO_ACTIVO);
            movDelitosDet.setCodigoDelito(detalle.getNumeracion());
            movDelitosDet.setDescripcionDelito(detalle.getNombre());
            movDelitosDet.setEstadoDelitosDet(maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado")));
            movDelitosDet.setFecha(LocalDate.now());
            movDelitosDet.setFlag("I");
            movDelitosDet.setUid("tud");
            movDelitosDet.setCodigoTud(detalle.getId());
            movDelitosDet.setDelitosAncestro(detalle.getIdRef());
            movDelitosDet.setEstadoDelitoDetalle(1);

            movDelitosDetRepository.save(movDelitosDet);

            switch (detalle.getNivel()) {
                case 1:
                    listDelitosParrafo.add(movDelitosDet);
                    break;
                case 2:
                    listDelitosNumeral.add(movDelitosDet);
                    break;
                case 3:
                    listDelitosLiteral.add(movDelitosDet);
                    break;
            }

            MaxIdDelitoDet++;
        }
    }

    private void relacionarDelitosValidador(List<MovDelitosDet> listDelitosPadre, List<MovDelitosDet> listDelitosHijo) {
        listDelitosPadre.forEach(padre -> {
            listDelitosHijo.forEach(hijo -> {
                if (Objects.equals(hijo.getDelitosAncestro(), padre.getCodigoTud())) {
                    hijo.setDelitosDetPadre(padre.getMovDelitosDetId());
                    hijo.setCodigo(hijo.getCodigo() + padre.getCodigoDelito().trim() + "." + hijo.getCodigoDelito().trim() + "0");
                    movDelitosDetRepository.save(hijo);
                }
            });
        });
    }

    private void actualizarEstadoRelacionNormaLegalDelitoValidador(MovNormaLegalDelito normaLegalDelito, MaeTipoMovimiento tipoMovimiento, DateTimeFormatter formatter) {
        normaLegalDelito.setFecha(LocalDate.now());
        normaLegalDelito.setFlag("U");
        normaLegalDelito.setTipoMovimiento(tipoMovimiento);
        relacionNormaDelitoRepository.save(normaLegalDelito);
    }

    private void insertarNuevaRelacionYDetalleDelitoValidador(NormaLegalRequest normaLegalRequest, Long MaxIdDelito, MaeTipoMovimiento tipoMovimientoNuevo, MovNormaLegal normaLegal, DateTimeFormatter formatter) {
        MovDelito movDelitoNuevo = new MovDelito();
        MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(normaLegalRequest.getDelito().getCabArticulo().getIdFuenteNormativa(), normaLegalRequest.getDelito().getCabArticulo().getIdCapitulo());
        movDelitoNuevo.setMovDelitoId(MaxIdDelito);
        movDelitoNuevo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelitoNuevo.setArticulo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelitoNuevo.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
        movDelitoNuevo.setMaeEstadoDelito(estadoDelitoAprobado);
        movDelitoNuevo.setFecha(LocalDate.now());
        movDelitoNuevo.setFlag("I");
        movDelitoNuevo.setUid("tud");
        movDelitoNuevo.setCfgFuenteEstructura(cfgFuenteEstructura);
        articuloRepository.save(movDelitoNuevo);

        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
        Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
        for (MovDelitosDet movDelitosDet : movDelitosDets) {
            MovDelitosDet movDelitosDetNuevo = new MovDelitosDet();
            movDelitosDetNuevo.setMovDelitosDetId(MaxIdDelitoDet);
            movDelitosDetNuevo.setDelito(movDelitoNuevo);
            movDelitosDetNuevo.setTipoDelitoDetalle(movDelitosDet.getTipoDelitoDetalle());
            movDelitosDetNuevo.setCodigo(movDelitosDet.getCodigo());
            movDelitosDetNuevo.setPenaMin(movDelitosDet.getPenaMin());
            movDelitosDetNuevo.setPenaMax(movDelitosDet.getPenaMax());
            movDelitosDetNuevo.setFechaIniVigencia(movDelitosDet.getFechaIniVigencia());
            movDelitosDetNuevo.setFechaFinVigencia(movDelitosDet.getFechaFinVigencia());
            movDelitosDetNuevo.setModificado(movDelitosDet.getModificado());
            movDelitosDetNuevo.setEstado(movDelitosDet.getEstado());
            movDelitosDetNuevo.setVersion(movDelitosDet.getVersion() + 1);
            movDelitosDetNuevo.setVigente(movDelitosDet.getVigente());
            movDelitosDetNuevo.setEstadoDelitoDetalle(movDelitosDet.getEstadoDelitoDetalle());
            movDelitosDetNuevo.setCodigoDelito(movDelitosDet.getCodigoDelito());
            movDelitosDetNuevo.setDescripcionDelito(movDelitosDet.getDescripcionDelito());
            movDelitosDetNuevo.setDelitosDetPadre(movDelitosDet.getDelitosDetPadre());
            movDelitosDetNuevo.setCodigoTud(movDelitosDet.getCodigoTud());
            movDelitosDetNuevo.setEstadoDelitosDet(movDelitosDet.getEstadoDelitosDet());
            movDelitosDetNuevo.setFecha(LocalDate.now());
            movDelitosDetNuevo.setFlag("I");
            movDelitosDetRepository.save(movDelitosDetNuevo);
            MaxIdDelitoDet++;
        }

        MovNormaLegalDelito normaLegalDelito = new MovNormaLegalDelito();
        normaLegalDelito.setNormaLegalDelitosId(MaxIdDelito);
        normaLegalDelito.setMovDelito(movDelitoNuevo);
        normaLegalDelito.setNormaLegal(normaLegal);
        normaLegalDelito.setTipoMovimiento(tipoMovimientoNuevo);
        normaLegalDelito.setFechaRegistro(LocalDate.now());
        normaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
        normaLegalDelito.setFecha(LocalDate.now());
        normaLegalDelito.setFlag("I");
        normaLegalDelito.setIdMovDelitosReferencia(normaLegalRequest.getDelitoId());
        relacionNormaDelitoRepository.save(normaLegalDelito);
    }

    private void insertarRelacionYDetalleActualValidador(NormaLegalRequest normaLegalRequest, Long MaxIdDelito, MovDelito movDelito, MaeTipoMovimiento tipoMovimiento, DateTimeFormatter formatter, Long idnormaLegalDelito, MovNormaLegal normaLegal, Usuario usuario) {

        MovNormaLegalDelito normaLegalDelitoActual = new MovNormaLegalDelito();
        normaLegalDelitoActual.setNormaLegalDelitosId(idnormaLegalDelito);
        normaLegalDelitoActual.setMovDelito(movDelito);
        normaLegalDelitoActual.setNormaLegal(normaLegal);
        normaLegalDelitoActual.setTipoMovimiento(tipoMovimiento);
        normaLegalDelitoActual.setFechaRegistro(LocalDate.now());
        normaLegalDelitoActual.setEstado(Constant.ESTADO_ACTIVO);
        normaLegalDelitoActual.setFecha(LocalDate.now());
        normaLegalDelitoActual.setFlag("I");
        relacionNormaDelitoRepository.save(normaLegalDelitoActual);
        idnormaLegalDelito++;

        MovDelito movDelitoNuevo = new MovDelito();
        MaeEstadoDelito estadoDelitoAprobado = maeEstadoDelitoRepository.findById(Constant.APROBAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(normaLegalRequest.getDelito().getCabArticulo().getIdFuenteNormativa(), normaLegalRequest.getDelito().getCabArticulo().getIdCapitulo());
        movDelitoNuevo.setMovDelitoId(MaxIdDelito);
        movDelitoNuevo.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelitoNuevo.setArticulo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelitoNuevo.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
        movDelitoNuevo.setMaeEstadoDelito(estadoDelitoAprobado);
        movDelitoNuevo.setFecha(LocalDate.now());
        movDelitoNuevo.setFlag("I");
        movDelitoNuevo.setUid("tud");
        movDelitoNuevo.setCfgFuenteEstructura(cfgFuenteEstructura);
        articuloRepository.save(movDelitoNuevo);

        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
        Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
        for (MovDelitosDet movDelitosDet : movDelitosDets) {
            MovDelitosDet movDelitosDetNuevo = new MovDelitosDet();
            movDelitosDetNuevo.setMovDelitosDetId(MaxIdDelitoDet);
            movDelitosDetNuevo.setDelito(movDelitoNuevo);
            movDelitosDetNuevo.setTipoDelitoDetalle(movDelitosDet.getTipoDelitoDetalle());
            movDelitosDetNuevo.setCodigo(movDelitosDet.getCodigo());
            movDelitosDetNuevo.setPenaMin(movDelitosDet.getPenaMin());
            movDelitosDetNuevo.setPenaMax(movDelitosDet.getPenaMax());
            movDelitosDetNuevo.setFechaIniVigencia(movDelitosDet.getFechaIniVigencia());
            movDelitosDetNuevo.setFechaFinVigencia(movDelitosDet.getFechaFinVigencia());
            movDelitosDetNuevo.setModificado(movDelitosDet.getModificado());
            movDelitosDetNuevo.setEstado(movDelitosDet.getEstado());
            movDelitosDetNuevo.setVersion(movDelitosDet.getVersion() + 1);
            movDelitosDetNuevo.setVigente(movDelitosDet.getVigente());
            movDelitosDetNuevo.setEstadoDelitoDetalle(movDelitosDet.getEstadoDelitoDetalle());
            movDelitosDetNuevo.setCodigoDelito(movDelitosDet.getCodigoDelito());
            movDelitosDetNuevo.setDescripcionDelito(movDelitosDet.getDescripcionDelito());
            movDelitosDetNuevo.setDelitosDetPadre(movDelitosDet.getDelitosDetPadre());
            movDelitosDetNuevo.setCodigoTud(movDelitosDet.getCodigoTud());
            movDelitosDetNuevo.setEstadoDelitosDet(movDelitosDet.getEstadoDelitosDet());
            movDelitosDetNuevo.setFecha(LocalDate.now());
            movDelitosDetNuevo.setFlag("I");
            movDelitosDetRepository.save(movDelitosDetNuevo);
            MaxIdDelitoDet++;
        }

        MaeTipoMovimiento tipoMovimientoNuevo = maeTipoMovimientoRepository.findById(Constant.NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
        normaLegalDelitoNuevo.setNormaLegalDelitosId(idnormaLegalDelito);
        normaLegalDelitoNuevo.setMovDelito(movDelitoNuevo);
        normaLegalDelitoNuevo.setNormaLegal(normaLegal);
        normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimientoNuevo);
        normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
        normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
        normaLegalDelitoNuevo.setFecha(LocalDate.now());
        normaLegalDelitoNuevo.setFlag("I");
        normaLegalDelitoNuevo.setIdMovDelitosReferencia(normaLegalRequest.getDelitoId());
        normaLegalDelitoNuevo.setUsuario(usuario);
        relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
        idnormaLegalDelito++;
    }

    private void crearNuevoDelitoValidador(NormaLegalRequest normaLegalRequest, MaeEstadoDelito estadoDelitoAprobado, Long MaxIdDelito, Long idnormaLegalDelito, MovNormaLegal normaLegal, MaeTipoMovimiento tipoMovimiento, DateTimeFormatter formatter) {
        MovDelito movDelito = new MovDelito();
        CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(normaLegalRequest.getDelito().getCabArticulo().getIdFuenteNormativa(), normaLegalRequest.getDelito().getCabArticulo().getIdCapitulo());
        movDelito.setMovDelitoId(MaxIdDelito);
        movDelito.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelito.setArticulo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
        movDelito.setMaeEstadoDelito(estadoDelitoAprobado);
        movDelito.setFecha(LocalDate.now());
        movDelito.setFlag("I");
        movDelito.setUid("tud");
        movDelito.setCfgFuenteEstructura(cfgFuenteEstructura);

        articuloRepository.save(movDelito);

        List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
        Long MaxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();

        List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
        List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
        List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();

        procesarDetallesDelitoValidador(normaLegalRequest, movDelitoDTODet, MaxIdDelitoDet, listDelitosParrafo, listDelitosNumeral, listDelitosLiteral, formatter);
        relacionarDelitosValidador(listDelitosParrafo, listDelitosNumeral);
        relacionarDelitosValidador(listDelitosNumeral, listDelitosLiteral);

        MovNormaLegalDelito normaLegalDelito = new MovNormaLegalDelito();
        normaLegalDelito.setNormaLegalDelitosId(idnormaLegalDelito);
        normaLegalDelito.setMovDelito(movDelito);
        normaLegalDelito.setNormaLegal(normaLegal);
        normaLegalDelito.setTipoMovimiento(tipoMovimiento);
        normaLegalDelito.setFechaRegistro(LocalDate.now());
        normaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
        normaLegalDelito.setFecha(LocalDate.now());
        normaLegalDelito.setFlag("I");
        relacionNormaDelitoRepository.save(normaLegalDelito);
    }

    /* fin nuevo*/
    //region auxiliares

    private MovDelito crearNuevoDelito(NormaLegalRequest request, Long MaxIdDelito) {
        MovDelito movDelito = new MovDelito();
        CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(
                request.getDelito().getCabArticulo().getIdFuenteNormativa(), request.getDelito().getCabArticulo().getIdCapitulo());
        movDelito.setMovDelitoId(MaxIdDelito);
        movDelito.setCodigo(request.getDelito().getCabArticulo().getArticulo());
        movDelito.setArticulo(request.getDelito().getCabArticulo().getArticulo());
        movDelito.setSumilla(request.getDelito().getCabArticulo().getSumilla());
        movDelito.setMaeEstadoDelito(maeEstadoDelitoRepository.findById(Constant.REGISTRAR_NUEVO)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO)));
        movDelito.setFecha(LocalDate.now());
        movDelito.setFlag("I");
        movDelito.setUid("tud");
        movDelito.setCfgFuenteEstructura(cfgFuenteEstructura);
        articuloRepository.save(movDelito);
        return movDelito;
    }

    private void procesarDetallesDelito(List<DetalleArticuloDTO> movDelitoDTODet, NormaLegalRequest request, DateTimeFormatter formatter) {
        Long maxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
        List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
        List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
        List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();

        for (DetalleArticuloDTO detalle : movDelitoDTODet) {
            MovDelitosDet movDelitosDet;
            switch (detalle.getNivel()) {
                case 1:
                    movDelitosDet = crearDetalleDelito(detalle, request, maxIdDelitoDet, Constant.PARRAFO, formatter);
                    listDelitosParrafo.add(movDelitosDet);
                    break;
                case 2:
                    movDelitosDet = crearDetalleDelito(detalle, request, maxIdDelitoDet, Constant.NUMERAL, formatter);
                    listDelitosNumeral.add(movDelitosDet);
                    break;
                case 3:
                    movDelitosDet = crearDetalleDelito(detalle, request, maxIdDelitoDet, Constant.LITERAL, formatter);
                    listDelitosLiteral.add(movDelitosDet);
                    break;
                default:
                    throw new IllegalArgumentException("Nivel no reconocido: " + detalle.getNivel());
            }
            maxIdDelitoDet++;
        }

        relacionarDelitos(listDelitosParrafo, listDelitosNumeral);
        relacionarDelitos(listDelitosNumeral, listDelitosLiteral);
    }

    private MovDelitosDet crearDetalleDelito(DetalleArticuloDTO detalle, NormaLegalRequest request, Long maxIdDelitoDet, Long tipoDelitoId, DateTimeFormatter formatter) {
        MovDelitosDet movDelitosDet = new MovDelitosDet();
        movDelitosDet.setMovDelitosDetId(maxIdDelitoDet);
        movDelitosDet.setDelito(articuloRepository.findById(request.getDelitoId())
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO)));
        movDelitosDet.setTipoDelitoDetalle(maeTipoDelitoDetalleRepository.findById(tipoDelitoId)
                .orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado")));
        movDelitosDet.setCodigo(request.getDelito().getCabArticulo().getArticulo() + "." + detalle.getNumeracion() + ".0.0");
        movDelitosDet.setPenaMin(detalle.getPenaMin());
        movDelitosDet.setPenaMax(detalle.getPenaMax());
        movDelitosDet.setFechaIniVigencia(detalle.getFechaInicioVigencia());
        movDelitosDet.setFechaFinVigencia(Constant.ACTIVO);
        movDelitosDet.setModificado(detalle.getFlagModificado());
        movDelitosDet.setEstado(Constant.ESTADO_ACTIVO);
        movDelitosDet.setVersion(1);
        movDelitosDet.setVigente(Constant.ESTADO_ACTIVO);
        movDelitosDet.setCodigoDelito(detalle.getNumeracion());
        movDelitosDet.setDescripcionDelito(detalle.getNombre());
        movDelitosDet.setEstadoDelitosDet(maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO)
                .orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado")));
        movDelitosDet.setFecha(LocalDate.now());
        movDelitosDet.setFlag("I");
        movDelitosDet.setUid("tud");
        movDelitosDet.setCodigoTud(detalle.getId());
        movDelitosDet.setDelitosAncestro(detalle.getIdRef());
        movDelitosDet.setEstadoDelitoDetalle(1);
        movDelitosDetRepository.save(movDelitosDet);
        return movDelitosDet;
    }

    private void relacionarDelitos(List<MovDelitosDet> padres, List<MovDelitosDet> hijos) {
        for (MovDelitosDet padre : padres) {
            for (MovDelitosDet hijo : hijos) {
                if (Objects.equals(hijo.getDelitosAncestro(), padre.getCodigoTud())) {
                    hijo.setDelitosDetPadre(padre.getMovDelitosDetId());
                    hijo.setCodigo(hijo.getCodigo() + padre.getCodigoDelito().trim() + "." + hijo.getCodigoDelito().trim() + "0");
                    movDelitosDetRepository.save(hijo);
                }
            }
        }
    }

    //endregion

    @Override
    @Transactional
    public ResultadoDTO guardarNormaLegal(NormaLegalRequest normaLegalRequest, String codigoUsuario) {
        System.out.println("guardarNormaLegal - version NUEVA");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
        ResultadoDTO resultadoDTO = new ResultadoDTO();
        Long idnormaLegalDelito = relacionNormaDelitoRepository.MaxId();
        if (idnormaLegalDelito == null) {
            idnormaLegalDelito = 1L;
        }
        MovNormaLegal normaLegal = normaLegalRepository.findById(normaLegalRequest.getDecretoId())
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_NORMA_NO_ENCONTRADA));
        Usuario usuario = usuarioRepository.buscarUsuarioxCodigo(codigoUsuario);

        switch (normaLegalRequest.getAccion()) {
            case 3:
                handleIncorporar(normaLegalRequest, normaLegal, usuario, idnormaLegalDelito);
                break;
            case 6:
                handleDerogarTotal(normaLegalRequest, normaLegal, usuario, idnormaLegalDelito);
                break;
            case 4:
                handleReubicar(normaLegalRequest, normaLegal, usuario, idnormaLegalDelito);
                break;
            case 2:
                handleModificar(normaLegalRequest, normaLegal, usuario, idnormaLegalDelito);
                break;
            case 7:
                handleDerogarParcial(normaLegalRequest, normaLegal, usuario, idnormaLegalDelito);
                break;
            default:
                throw new IllegalArgumentException("AcciÃ³n no reconocida: " + normaLegalRequest.getAccion());
        }

        resultadoDTO.setResultado("Los Datos se guardaron correctamente");
        return resultadoDTO;
    }


    //region MÃ©todos de handleIncorporar

    private void handleIncorporar(NormaLegalRequest normaLegalRequest, MovNormaLegal normaLegal, Usuario usuario, Long idnormaLegalDelito) {

        Long MaxIdDelito = articuloRepository.MaxDelitos();
        MovNormaLegalDelito normaLegalDelito = new MovNormaLegalDelito();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);

        MaeEstadoDelito estadoDelitoRegistrado = maeEstadoDelitoRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.INCORPORAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));

        if (normaLegalRequest.getDelitoId() != null) {
            actualizarDelitoExistenteIncorpora(normaLegalRequest, usuario, normaLegalDelito, estadoDelitoRegistrado, tipoMovimiento, formatter);
        } else {
            crearNuevoDelitoIncorpora(normaLegalRequest, usuario, MaxIdDelito, normaLegalDelito, estadoDelitoRegistrado, tipoMovimiento, formatter, idnormaLegalDelito, normaLegal);
        }
    }

    private void actualizarDelitoExistenteIncorpora(NormaLegalRequest normaLegalRequest, Usuario usuario, MovNormaLegalDelito normaLegalDelito, MaeEstadoDelito estadoDelitoRegistrado, MaeTipoMovimiento tipoMovimiento, DateTimeFormatter formatter) {
        MaeEstadoDelitosDet estadoDelitoEliminado = maeEstadoDelitoDetRepository.findById(Constant.ELIMINAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MovDelito movDelito = articuloRepository.findById(normaLegalRequest.getDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));

        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(normaLegalRequest.getDelitoId());
        for (MovDelitosDet delitos : movDelitosDets) {
            delitos.setEstadoDelitoDetalle(0);
            delitos.setEstado(Constant.ESTADO_INACTIVO);
            delitos.setVigente(Constant.ESTADO_INACTIVO);
            delitos.setFecha(LocalDate.now());
            delitos.setEstadoDelitosDet(estadoDelitoEliminado);
            delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
            movDelitosDetRepository.save(delitos);
        }

        List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
        procesarDetallesDelitoIncorpora(movDelitoDTODet, normaLegalRequest, formatter, movDelito);

        normaLegalDelito = normaLegalRepository.normaLegalDelito(normaLegalRequest.getDecretoId(), normaLegalRequest.getDelitoId());
        normaLegalDelito.setFecha(LocalDate.now());
        normaLegalDelito.setUsuario(usuario);
        relacionNormaDelitoRepository.save(normaLegalDelito);
    }

    private void crearNuevoDelitoIncorpora(NormaLegalRequest normaLegalRequest, Usuario usuario, Long MaxIdDelito, MovNormaLegalDelito normaLegalDelito, MaeEstadoDelito estadoDelitoRegistrado, MaeTipoMovimiento tipoMovimiento, DateTimeFormatter formatter, Long idnormaLegalDelito, MovNormaLegal normaLegal) {
        MovDelito movDelito = new MovDelito();
        CfgFuenteEstructura cfgFuenteEstructura = cfgFuenteEstructuraRepository.buscarFuenteEstructura(normaLegalRequest.getDelito().getCabArticulo().getIdFuenteNormativa(), normaLegalRequest.getDelito().getCabArticulo().getIdCapitulo());
        movDelito.setMovDelitoId(MaxIdDelito);
        movDelito.setCodigo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelito.setArticulo(normaLegalRequest.getDelito().getCabArticulo().getArticulo());
        movDelito.setSumilla(normaLegalRequest.getDelito().getCabArticulo().getSumilla());
        movDelito.setMaeEstadoDelito(estadoDelitoRegistrado);
        movDelito.setFecha(LocalDate.now());
        movDelito.setFlag("I");
        movDelito.setUid("tud");
        movDelito.setCfgFuenteEstructura(cfgFuenteEstructura);
        articuloRepository.save(movDelito);

        List<DetalleArticuloDTO> movDelitoDTODet = normaLegalRequest.getDelito().getDetArticulo();
        procesarDetallesDelitoIncorpora(movDelitoDTODet, normaLegalRequest, formatter, movDelito);

        normaLegalDelito.setNormaLegalDelitosId(idnormaLegalDelito);
        normaLegalDelito.setMovDelito(movDelito);
        normaLegalDelito.setNormaLegal(normaLegal);
        normaLegalDelito.setTipoMovimiento(tipoMovimiento);
        normaLegalDelito.setFechaRegistro(LocalDate.now());
        normaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
        normaLegalDelito.setFecha(LocalDate.now());
        normaLegalDelito.setFlag("I");
        normaLegalDelito.setUsuario(usuario);
        relacionNormaDelitoRepository.save(normaLegalDelito);
    }

    private void procesarDetallesDelitoIncorpora(List<DetalleArticuloDTO> movDelitoDTODet, NormaLegalRequest request, DateTimeFormatter formatter, MovDelito movDelito) {
        Long maxIdDelitoDet = movDelitosDetRepository.MaxDelitosDet();
        List<MovDelitosDet> listDelitosParrafo = new ArrayList<>();
        List<MovDelitosDet> listDelitosNumeral = new ArrayList<>();
        List<MovDelitosDet> listDelitosLiteral = new ArrayList<>();

        for (DetalleArticuloDTO detalle : movDelitoDTODet) {
            MovDelitosDet movDelitosDet;
            switch (detalle.getNivel()) {
                case 1:
                    movDelitosDet = crearDetalleDelitoIncorpora(detalle, request, maxIdDelitoDet, Constant.PARRAFO, formatter, movDelito);
                    listDelitosParrafo.add(movDelitosDet);
                    break;
                case 2:
                    movDelitosDet = crearDetalleDelitoIncorpora(detalle, request, maxIdDelitoDet, Constant.NUMERAL, formatter, movDelito);
                    listDelitosNumeral.add(movDelitosDet);
                    break;
                case 3:
                    movDelitosDet = crearDetalleDelitoIncorpora(detalle, request, maxIdDelitoDet, Constant.LITERAL, formatter, movDelito);
                    listDelitosLiteral.add(movDelitosDet);
                    break;
                default:
                    throw new IllegalArgumentException("Nivel no reconocido: " + detalle.getNivel());
            }
            maxIdDelitoDet++;
        }

        relacionarDelitosIncorpora(listDelitosParrafo, listDelitosNumeral);
        relacionarDelitosIncorpora(listDelitosNumeral, listDelitosLiteral);
    }

    private MovDelitosDet crearDetalleDelitoIncorpora(DetalleArticuloDTO detalle, NormaLegalRequest request, Long maxIdDelitoDet, Long tipoDelitoId, DateTimeFormatter formatter, MovDelito movDelito) {
        MovDelitosDet movDelitosDet = new MovDelitosDet();
        movDelitosDet.setMovDelitosDetId(maxIdDelitoDet);
        movDelitosDet.setDelito(movDelito);
        movDelitosDet.setTipoDelitoDetalle(maeTipoDelitoDetalleRepository.findById(tipoDelitoId)
                .orElseThrow(() -> new RuntimeException("Tipo de Delito no encontrado")));
        movDelitosDet.setCodigo(request.getDelito().getCabArticulo().getArticulo() + "." + detalle.getNumeracion() + ".0.0");
        movDelitosDet.setPenaMin(detalle.getPenaMin());
        movDelitosDet.setPenaMax(detalle.getPenaMax());
        movDelitosDet.setFechaIniVigencia(detalle.getFechaInicioVigencia());
        movDelitosDet.setFechaFinVigencia(Constant.ACTIVO);
        movDelitosDet.setModificado(detalle.getFlagModificado());
        movDelitosDet.setEstado(Constant.ESTADO_ACTIVO);
        movDelitosDet.setVersion(1);
        movDelitosDet.setVigente(Constant.ESTADO_ACTIVO);
        movDelitosDet.setCodigoDelito(detalle.getNumeracion());
        movDelitosDet.setDescripcionDelito(detalle.getNombre());
        movDelitosDet.setEstadoDelitosDet(maeEstadoDelitoDetRepository.findById(Constant.REGISTRAR_NUEVO)
                .orElseThrow(() -> new RuntimeException("Tipo de Estado no encontrado")));
        movDelitosDet.setFecha(LocalDate.now());
        movDelitosDet.setFlag("I");
        movDelitosDet.setUid("tud");
        movDelitosDet.setCodigoTud(detalle.getId());
        movDelitosDet.setDelitosAncestro(detalle.getIdRef());
        movDelitosDet.setEstadoDelitoDetalle(1);
        movDelitosDetRepository.save(movDelitosDet);
        return movDelitosDet;
    }

    private void relacionarDelitosIncorpora(List<MovDelitosDet> padres, List<MovDelitosDet> hijos) {
        for (MovDelitosDet padre : padres) {
            for (MovDelitosDet hijo : hijos) {
                if (Objects.equals(hijo.getDelitosAncestro(), padre.getCodigoTud())) {
                    hijo.setDelitosDetPadre(padre.getMovDelitosDetId());
                    hijo.setCodigo(hijo.getCodigo() + padre.getCodigoDelito().trim() + "." + hijo.getCodigoDelito().trim() + "0");
                    movDelitosDetRepository.save(hijo);
                }
            }
        }
    }

    //endregion

//    private void actualizarEstadoDelito(NormaLegalRequest request, DateTimeFormatter formatter) {
//        MaeEstadoDelitosDet estadoDelitoEliminado = maeEstadoDelitoDetRepository.findById(Constant.ELIMINAR_NUEVO)
//                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
//        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(request.getDelitoId());
//        for (MovDelitosDet delitos : movDelitosDets) {
//            delitos.setEstadoDelitoDetalle(0);
//            delitos.setEstado(Constant.ESTADO_INACTIVO);
//            delitos.setVigente(Constant.ESTADO_INACTIVO);
//            delitos.setFecha(LocalDate.now());
//            delitos.setEstadoDelitosDet(estadoDelitoEliminado);
//            delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
//            movDelitosDetRepository.save(delitos);
//        }
//    }
//


    //region MÃ©todos de handleDerogarTotal

    private void handleDerogarTotal(NormaLegalRequest request, MovNormaLegal normaLegal, Usuario usuario, Long idNormaLegalDelito) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.DEROGAR_TOTAL)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(request.getDecretoId(), request.getDelitoId());
        MovDelito movDelito = articuloRepository.findById(request.getDelitoId())
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));

        if (normaLegalDelito != null) {
            /*Actualiza el estado relacion normaLegalDelito*/
            actualizarEstadoRelacionNormaLegalDelito(normaLegalDelito, usuario, formatter);

            /*Actualiza el estado del detalle Actual*/
            actualizarEstadoDetalleActual(request, formatter);
        } else {
            /*Actualiza el estado del detalle Actual*/
            MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO)
                    .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(request.getDelitoId());
            for (MovDelitosDet delitos : movDelitosDets) {
                delitos.setEstadoDelitoDetalle(0);
                delitos.setEstado(Constant.ESTADO_INACTIVO);
                delitos.setVigente(Constant.ESTADO_INACTIVO);
                delitos.setFecha(LocalDate.now());
                delitos.setEstadoDelitosDet(estadoDelitoArchivado);
                delitos.setFechaFinVigencia(request.getDelito().getCabArticulo().getFechaRegistro());
                movDelitosDetRepository.save(delitos);
            }

            MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
            nuevoNormaLegalDelito.setNormaLegalDelitosId(idNormaLegalDelito);
            nuevoNormaLegalDelito.setMovDelito(movDelito);
            nuevoNormaLegalDelito.setNormaLegal(normaLegal);
            nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
            nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
            nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
            nuevoNormaLegalDelito.setFecha(LocalDate.now());
            nuevoNormaLegalDelito.setFlag("I");
            nuevoNormaLegalDelito.setUsuario(usuario);
            relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);
        }
    }

    private void actualizarEstadoRelacionNormaLegalDelito(MovNormaLegalDelito normaLegalDelito, Usuario usuario, DateTimeFormatter formatter) {
        normaLegalDelito.setFecha(LocalDate.now());
        normaLegalDelito.setFlag("U");
        normaLegalDelito.setUsuario(usuario);
        relacionNormaDelitoRepository.save(normaLegalDelito);
    }

    private void actualizarEstadoDetalleActual(NormaLegalRequest request, DateTimeFormatter formatter) {
        List<MovDelitosDet> movDelitosDets = movDelitosDetRepository.ListaDelitosDet(request.getDelitoId());
        for (MovDelitosDet delitos : movDelitosDets) {
            delitos.setFecha(LocalDate.now());
            delitos.setFechaFinVigencia(LocalDate.now().format(formatter));
            movDelitosDetRepository.save(delitos);
        }
    }
    //endregion

    //region MÃ©todos de handleReubicar

    private void handleReubicar(NormaLegalRequest request, MovNormaLegal normaLegal, Usuario usuario, Long idNormaLegalDelito) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.REUBICAR)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MaeTipoMovimiento tipoMovimientoNuevo = maeTipoMovimientoRepository.findById(Constant.NUEVO)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(request.getDecretoId(), request.getDelitoId());
        MovDelito movDelito = articuloRepository.findById(request.getDelitoId())
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));

        if (normaLegalDelito != null) {
            /*Actualiza el estado relacion normaLegalDelito*/
            actualizarEstadoRelacionNormaLegalDelito(normaLegalDelito, usuario, formatter);

            /*Inserta Relacion de Delito Actual*/
            MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
            nuevoNormaLegalDelito.setNormaLegalDelitosId(idNormaLegalDelito);
            nuevoNormaLegalDelito.setMovDelito(movDelito);
            nuevoNormaLegalDelito.setNormaLegal(normaLegal);
            nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
            nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
            nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
            nuevoNormaLegalDelito.setFecha(LocalDate.now());
            nuevoNormaLegalDelito.setFlag("I");
            nuevoNormaLegalDelito.setUsuario(usuario);
            relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);

            /*Inserta Cabecera de Delito Nuevo*/
            MovDelito nuevoMovDelito = crearNuevoDelito(request, articuloRepository.MaxDelitos());
            List<DetalleArticuloDTO> movDelitoDTODet = request.getDelito().getDetArticulo();
            procesarDetallesDelito(movDelitoDTODet, request, formatter);
            nuevoNormaLegalDelito.setNormaLegalDelitosId(idNormaLegalDelito + 1);
            nuevoNormaLegalDelito.setMovDelito(nuevoMovDelito);
            nuevoNormaLegalDelito.setNormaLegal(normaLegal);
            nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimientoNuevo);
            nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
            nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
            nuevoNormaLegalDelito.setFecha(LocalDate.now());
            nuevoNormaLegalDelito.setFlag("I");
            nuevoNormaLegalDelito.setIdMovDelitosReferencia(request.getDelitoId());
            nuevoNormaLegalDelito.setUsuario(usuario);
            relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);

            /*Actualiza el estado de la cabecera del Delito*/
            actualizarEstadoCabeceraDelito(movDelito, Constant.ARCHIVADO);
            /*Actualiza el estado del detalle Actual*/
            actualizarEstadoDetalleActual(request, formatter);
        } else {
            /*Inserta Relacion de Delito Actual*/
            MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
            nuevoNormaLegalDelito.setNormaLegalDelitosId(idNormaLegalDelito);
            nuevoNormaLegalDelito.setMovDelito(movDelito);
            nuevoNormaLegalDelito.setNormaLegal(normaLegal);
            nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
            nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
            nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
            nuevoNormaLegalDelito.setFecha(LocalDate.now());
            nuevoNormaLegalDelito.setFlag("I");
            nuevoNormaLegalDelito.setUsuario(usuario);
            relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);
            idNormaLegalDelito++;

            MovDelito nuevoMovDelito = crearNuevoDelito(request, articuloRepository.MaxDelitos());
            List<DetalleArticuloDTO> movDelitoDTODet = request.getDelito().getDetArticulo();
            procesarDetallesDelito(movDelitoDTODet, request, formatter);

            /*Inserta Cabecera de Delito Nuevo*/
            MovNormaLegalDelito nuevoNormaLegalDelitoNuevo = new MovNormaLegalDelito();
            nuevoNormaLegalDelitoNuevo.setNormaLegalDelitosId(idNormaLegalDelito);
            nuevoNormaLegalDelitoNuevo.setMovDelito(nuevoMovDelito);
            nuevoNormaLegalDelitoNuevo.setNormaLegal(normaLegal);
            nuevoNormaLegalDelitoNuevo.setTipoMovimiento(tipoMovimientoNuevo);
            nuevoNormaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
            nuevoNormaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
            nuevoNormaLegalDelitoNuevo.setFecha(LocalDate.now());
            nuevoNormaLegalDelitoNuevo.setFlag("I");
            nuevoNormaLegalDelitoNuevo.setIdMovDelitosReferencia(request.getDelitoId());
            nuevoNormaLegalDelitoNuevo.setUsuario(usuario);
            relacionNormaDelitoRepository.save(nuevoNormaLegalDelitoNuevo);

            actualizarEstadoCabeceraDelito(movDelito, Constant.ARCHIVADO);
            actualizarEstadoDetalleActual(request, formatter);
        }
    }

    private void actualizarEstadoCabeceraDelito(MovDelito movDelito, Long estadoId) {
        MaeEstadoDelito estadoDelitoArchivado = maeEstadoDelitoRepository.findById(estadoId)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        movDelito.setMaeEstadoDelito(estadoDelitoArchivado);
        movDelito.setFecha(LocalDate.now());
        movDelito.setFlag("U");
        articuloRepository.save(movDelito);
    }
    //endregion

    //region MÃ©todos de handleModificar

    private void handleModificar(NormaLegalRequest request, MovNormaLegal normaLegal, Usuario usuario, Long idNormaLegalDelito) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.MODIFICAR)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MovNormaLegalDelito normaLegalDelito = normaLegalRepository.normaLegalDelito(request.getDecretoId(), request.getDelitoId());
        MovDelito movDelito = articuloRepository.findById(request.getDelitoId())
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));

        if (normaLegalDelito != null) {
            /*Actualiza el estado relacion normaLegalDelito*/
            actualizarEstadoRelacionNormaLegalDelito(normaLegalDelito, usuario, formatter);

            /*Actualiza los datos de Delito*/
            movDelito.setSumilla(request.getDelito().getCabArticulo().getSumilla());
            movDelito.setFecha(LocalDate.now());
            movDelito.setFlag("U");
            articuloRepository.save(movDelito);

            /*Actualiza el estado del detalle Actual*/
            actualizarEstadoDetalleActual(request, formatter);

            MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
            List<DetalleArticuloDTO> movDelitoDTODet = request.getDelito().getDetArticulo();
            procesarDetallesDelito(movDelitoDTODet, request, formatter);
            nuevoNormaLegalDelito.setNormaLegalDelitosId(idNormaLegalDelito);
            nuevoNormaLegalDelito.setMovDelito(movDelito);
            nuevoNormaLegalDelito.setNormaLegal(normaLegal);
            nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
            nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
            nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
            nuevoNormaLegalDelito.setFecha(LocalDate.now());
            nuevoNormaLegalDelito.setFlag("I");
            nuevoNormaLegalDelito.setUsuario(usuario);
            relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);
        } else {
            /*NO EXISTE(MovNormaLegalDelito) | NUEVO - BUSQUEDA */
            /*Actualiza los datos de Delito*/
            movDelito.setSumilla(request.getDelito().getCabArticulo().getSumilla());
            movDelito.setFecha(LocalDate.now());
            movDelito.setFlag("U");
            articuloRepository.save(movDelito);

            /*Actualiza el estado del detalle Actual*/
            actualizarEstadoDetalleActual(request, formatter);

            MovNormaLegalDelito nuevoNormaLegalDelito = new MovNormaLegalDelito();
            List<DetalleArticuloDTO> movDelitoDTODet = request.getDelito().getDetArticulo();
            procesarDetallesDelito(movDelitoDTODet, request, formatter);
            nuevoNormaLegalDelito.setNormaLegalDelitosId(idNormaLegalDelito);
            nuevoNormaLegalDelito.setMovDelito(movDelito);
            nuevoNormaLegalDelito.setNormaLegal(normaLegal);
            nuevoNormaLegalDelito.setTipoMovimiento(tipoMovimiento);
            nuevoNormaLegalDelito.setFechaRegistro(LocalDate.now());
            nuevoNormaLegalDelito.setEstado(Constant.ESTADO_ACTIVO);
            nuevoNormaLegalDelito.setFecha(LocalDate.now());
            nuevoNormaLegalDelito.setFlag("I");
            nuevoNormaLegalDelito.setUsuario(usuario);
            relacionNormaDelitoRepository.save(nuevoNormaLegalDelito);
        }
    }
    //endregion

    //region MÃ©todos de handleDerogarParcial

    private void handleDerogarParcial(NormaLegalRequest request, MovNormaLegal normaLegal, Usuario usuario, Long idNormaLegalDelito) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
        MaeTipoMovimiento tipoMovimiento = maeTipoMovimientoRepository.findById(Constant.DEROGAR_PARCIAL)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        MaeTipoMovimiento tipoMovimientoNuevo = maeTipoMovimientoRepository.findById(Constant.NUEVO)
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
        List<MovNormaLegalDelito> normaLegalDelitoList = normaLegalRepository.normaLegalDelitos(request.getDecretoId(), request.getDelitoId());
        MovDelito movDelito = articuloRepository.findById(request.getDelitoId())
                .orElseThrow(() -> new RuntimeException(Constant.TEXTO_DELITO_NO_ENCONTRADO));

        if (normaLegalDelitoList.size() > 0) {
            for (MovNormaLegalDelito normaLegalDelito : normaLegalDelitoList) {
                /*Actualiza el estado de normaLegalDelito*/
                actualizarEstadoRelacionNormaLegalDelito(normaLegalDelito, usuario, formatter);
            }

            MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO)
                    .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            /*Actualiza el estado del detalle Actual*/
            actualizarEstadoDetalleActual(request, formatter);

            List<DetalleArticuloDTO> movDelitoDTODet = request.getDelito().getDetArticulo();
            procesarDetallesDelito(movDelitoDTODet, request, formatter);

            /*Inserta Relacion de Delito Nuevo*/
            MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
            normaLegalDelitoNuevo.setNormaLegalDelitosId(idNormaLegalDelito);
            normaLegalDelitoNuevo.setMovDelito(movDelito);
            normaLegalDelitoNuevo.setNormaLegal(normaLegal);
            normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimientoNuevo);
            normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
            normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
            normaLegalDelitoNuevo.setFecha(LocalDate.now());
            normaLegalDelitoNuevo.setFlag("I");
            normaLegalDelitoNuevo.setUsuario(usuario);
            relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
        } else {
            MaeEstadoDelitosDet estadoDelitoArchivado = maeEstadoDelitoDetRepository.findById(Constant.ARCHIVADO)
                    .orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
            actualizarEstadoDetalleActual(request, formatter);

            /*Inserta Relacion de Delito Actual*/
            MovNormaLegalDelito normaLegalDelitoActual = new MovNormaLegalDelito();
            normaLegalDelitoActual.setNormaLegalDelitosId(idNormaLegalDelito);
            normaLegalDelitoActual.setMovDelito(movDelito);
            normaLegalDelitoActual.setNormaLegal(normaLegal);
            normaLegalDelitoActual.setTipoMovimiento(tipoMovimiento);
            normaLegalDelitoActual.setFechaRegistro(LocalDate.now());
            normaLegalDelitoActual.setEstado(Constant.ESTADO_ACTIVO);
            normaLegalDelitoActual.setFecha(LocalDate.now());
            normaLegalDelitoActual.setFlag("I");
            normaLegalDelitoActual.setUsuario(usuario);
            relacionNormaDelitoRepository.save(normaLegalDelitoActual);
            idNormaLegalDelito++;

            List<DetalleArticuloDTO> movDelitoDTODet = request.getDelito().getDetArticulo();
            procesarDetallesDelito(movDelitoDTODet, request, formatter);

            /*Inserta Relacion de Delito Nuevo*/
            MovNormaLegalDelito normaLegalDelitoNuevo = new MovNormaLegalDelito();
            normaLegalDelitoNuevo.setNormaLegalDelitosId(idNormaLegalDelito);
            normaLegalDelitoNuevo.setMovDelito(movDelito);
            normaLegalDelitoNuevo.setNormaLegal(normaLegal);
            normaLegalDelitoNuevo.setTipoMovimiento(tipoMovimientoNuevo);
            normaLegalDelitoNuevo.setFechaRegistro(LocalDate.now());
            normaLegalDelitoNuevo.setEstado(Constant.ESTADO_ACTIVO);
            normaLegalDelitoNuevo.setFecha(LocalDate.now());
            normaLegalDelitoNuevo.setFlag("I");
            normaLegalDelitoNuevo.setUsuario(usuario);
            relacionNormaDelitoRepository.save(normaLegalDelitoNuevo);
        }
    }
    //endregion




//    @Override
//    public ResultadoDTO validarNormaLegal(NormaLegalRequest normaLegalRequest, String codigoUsuario) {
//        return null;
//    }
//

    @Override
    public ResultadoDTO guardarFeNormasLegales(NormaLegalRequest normaLegalRequest) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(Constant.FORMAT_TIME_DDMMYYY);
        ResultadoDTO resultadoDTO = new ResultadoDTO();
        Long decreto = normaLegalRequest.getDecretoId();
//        Integer idrelacionNormaDelito = relacionNormaDelitoRepository.MaxId();
//        MovNormaLegal delito5Data = normaLegalRepository.getReferenceById(decreto);
//        List<DelitosRequest> delitos = normaLegalRequest.getDelitos();
//        for (DelitosRequest delito : delitos) {
//            if (delito.getAccion() == 2) {//AcciÃ³n: Modificar
//                VisualizarArticuloDTO visualizarArticuloDTO = delito.getDetalle();
//                Maestra TipoMovimiento = maestraLegalRepository.findById(Constant.MODIFICAR).orElseThrow(() -> new RuntimeException("Estado Maestra no encontrado"));
//                Maestra EstadoRegistro = maestraLegalRepository.findById(Constant.APROBAR).orElseThrow(() -> new RuntimeException("Estado Maestra no encontrado"));
//                Maestra EstadoEliminar = maestraLegalRepository.findById(Constant.ELIMINAR).orElseThrow(() -> new RuntimeException("Estado Maestra no encontrado"));
//                Integer maxDelitos = articuloRepository.MaxDelitos();
//                /*Actualiza el estado*/
//                List<Delito3Data> delito3DataList = articuloRepository.listarDetArticulosAll(delito.getDetalle().getOriginal().getArticulo(), delito.getDetalle().getOriginal().getVersion());
//                for (Delito3Data delito3Data : delito3DataList) {
//                    delito3Data.setMaestra(EstadoEliminar);
//                    articuloRepository.save(delito3Data);
//                }
//                /*Elimina la relacion norma legal vs delito*/
//                List<RelacionNormaDelito> list1 = relacionNormaDelitoRepository.listaRelacionNormaDelito(decreto, delito.getDetalle().getOriginal().getArticulo(), delito.getDetalle().getOriginal().getVersion());
//                relacionNormaDelitoRepository.deleteAll(list1);
//                /*Agrega el nuevo artÃ­culo*/
//                for (int j = 0; j < visualizarArticuloDTO.getResultado().size(); j++) {
//                    Delito3Data data = new Delito3Data();
//                    DelitoFuente delitoFuente = new DelitoFuente();
//                    /*ArtÃ­culo Cabecera*/
//                    delitoFuente.setDelitoFuenteId(Integer.parseInt(delito.getDetalle().getCabArticulo().getFuenteNormativa()));
//                    data.setArticulo(delito.getArticulo());
//                    data.setFuenteNormativa(delito.getDetalle().getCabArticulo().getFuenteNormativa());
//                    data.setSumilla(delito.getTitulo());
//                    data.setVersionNorma(delito.getDetalle().getOriginal().getVersion());
//                    data.setDelitoId(maxDelitos);
//                    data.setDelitoFuente(delitoFuente);
//                    data.setLibro(visualizarArticuloDTO.getCabArticulo().getLibro());
//                    data.setCapitulo(visualizarArticuloDTO.getCabArticulo().getCapitulo());
//                    data.setSeccion(visualizarArticuloDTO.getCabArticulo().getSeccion());
//                    data.setTitulo(visualizarArticuloDTO.getCabArticulo().getTitulo());
//                    /*ArtÃ­culo Detalle*/
//                    data.setParrafo(visualizarArticuloDTO.getResultado().get(j).getParrafo());
//                    data.setDescripcionParrafo(visualizarArticuloDTO.getResultado().get(j).getDescripcionParrafo());
//                    data.setInciso(visualizarArticuloDTO.getResultado().get(j).getInciso());
//                    data.setDescripcionInciso(visualizarArticuloDTO.getResultado().get(j).getDescripcionInciso());
//                    data.setLiteral(visualizarArticuloDTO.getResultado().get(j).getLiteral());
//                    data.setDescripcionLiteral(visualizarArticuloDTO.getResultado().get(j).getDescripcionLiteral());
//                    data.setPenaMaxima(visualizarArticuloDTO.getResultado().get(j).getPenaMax());
//                    data.setPenaMinima(visualizarArticuloDTO.getResultado().get(j).getPenaMin());
//                    data.setFlagModificado(visualizarArticuloDTO.getResultado().get(j).getFlagModificado());
//                    data.setFechaVigencia(delito.getFechaInicioVigencia());
//                    data.setFechaFinVigencia(delito.getFechaFinVigencia());
//                    data.setMaestra(EstadoRegistro);
//                    articuloRepository.save(data);
//                    RelacionNormaDelito relacionNormaDelito = new RelacionNormaDelito();
//                    relacionNormaDelito.setRelacionNormaDelitoId(idrelacionNormaDelito);
//                    relacionNormaDelito.setDelito3Data(data);
//                    //relacionNormaDelito.setDelito5Data(delito5Data);
//                    relacionNormaDelito.setFechaRegistro(LocalDateTime.now());
//                    relacionNormaDelito.setMaestra(TipoMovimiento);
//                    relacionNormaDelitoRepository.save(relacionNormaDelito);
//                    idrelacionNormaDelito++;
//                    maxDelitos++;
//                }
//                List<Delito3Data> detArticuloViewList = articuloRepository.listarDetArticulosAll(delito.getDetalle().getOriginal().getArticulo(), delito.getDetalle().getOriginal().getVersion());
//                for (Delito3Data delito3Data : detArticuloViewList) {
//                    delito3Data.setFechaFinVigencia(delito.getDetalle().getOriginal().getFechaFinVigencia());
//                    articuloRepository.save(delito3Data);
//                }
//                resultadoDTO.setResultado("Los Datos se guardaron correctamente");
//            }
//            if (delito.getAccion() == 3) {//AcciÃ³n: Incorporar
//                VisualizarArticuloDTO visualizarArticuloDTO = delito.getDetalle();
//                Maestra TipoMovimiento = maestraLegalRepository.findById(Constant.INCORPORAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
//                Maestra EstadoRegistro = maestraLegalRepository.findById(Constant.APROBAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
//                Maestra EstadoEliminar = maestraLegalRepository.findById(Constant.ELIMINAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
//                Integer maxDelitos = articuloRepository.MaxDelitos();
//                /*Actualiza el estado*/
//                List<Delito3Data> delito3DataList = articuloRepository.listarDetArticulosAll(delito.getDetalle().getOriginal().getArticulo(), delito.getDetalle().getOriginal().getVersion());
//                for (Delito3Data delito3Data : delito3DataList) {
//                    delito3Data.setMaestra(EstadoEliminar);
//                    articuloRepository.save(delito3Data);
//                }
//                /*Elimina la relacion norma legal vs delito*/
//                List<RelacionNormaDelito> list1 = relacionNormaDelitoRepository.listaRelacionNormaDelito(decreto, delito.getDetalle().getOriginal().getArticulo(), delito.getDetalle().getOriginal().getVersion());
//                relacionNormaDelitoRepository.deleteAll(list1);
//
//                for (int j = 0; j < visualizarArticuloDTO.getResultado().size(); j++) {
//                    Delito3Data data = new Delito3Data();
//                    DelitoFuente delitoFuente = new DelitoFuente();
//                    delitoFuente.setDelitoFuenteId(Integer.parseInt(delito.getDetalle().getCabArticulo().getFuenteNormativa()));
//                    data.setCodigoVisual(delito.getArticulo() + "." + visualizarArticuloDTO.getResultado().get(j).getParrafo()
//                            + "." + visualizarArticuloDTO.getResultado().get(j).getInciso() + "." + visualizarArticuloDTO.getResultado().get(j).getLiteral());
//                    data.setArticulo(delito.getArticulo());
//                    data.setFuenteNormativa(delito.getCodFuente());
//                    data.setSumilla(delito.getTitulo());
//                    data.setVersionNorma(delito.getDetalle().getOriginal().getVersion());
//                    data.setDelitoId(maxDelitos);
//                    data.setDelitoFuente(delitoFuente);
//                    data.setLibro(visualizarArticuloDTO.getCabArticulo().getLibro());
//                    data.setCapitulo(visualizarArticuloDTO.getCabArticulo().getCapitulo());
//                    data.setSeccion(visualizarArticuloDTO.getCabArticulo().getSeccion());
//                    data.setTitulo(visualizarArticuloDTO.getCabArticulo().getTitulo());
//
//                    data.setParrafo(visualizarArticuloDTO.getResultado().get(j).getParrafo());
//                    data.setDescripcionParrafo(visualizarArticuloDTO.getResultado().get(j).getDescripcionParrafo());
//                    data.setInciso(visualizarArticuloDTO.getResultado().get(j).getInciso());
//                    data.setDescripcionInciso(visualizarArticuloDTO.getResultado().get(j).getDescripcionInciso());
//                    data.setLiteral(visualizarArticuloDTO.getResultado().get(j).getLiteral());
//                    data.setDescripcionLiteral(visualizarArticuloDTO.getResultado().get(j).getDescripcionLiteral());
//                    data.setPenaMaxima(visualizarArticuloDTO.getResultado().get(j).getPenaMax());
//                    data.setPenaMinima(visualizarArticuloDTO.getResultado().get(j).getPenaMin());
//
//                    data.setFechaVigencia(delito.getFechaInicioVigencia());
//                    data.setFechaFinVigencia(delito.getFechaFinVigencia());
//                    data.setMaestra(EstadoRegistro);
//                    articuloRepository.save(data);
//                    RelacionNormaDelito relacionNormaDelito = new RelacionNormaDelito();
//                    relacionNormaDelito.setRelacionNormaDelitoId(idrelacionNormaDelito);
//                    relacionNormaDelito.setDelito3Data(data);
//                    //relacionNormaDelito.setDelito5Data(delito5Data);
//                    relacionNormaDelito.setFechaRegistro(LocalDateTime.now());
//                    relacionNormaDelito.setMaestra(TipoMovimiento);
//                    relacionNormaDelitoRepository.save(relacionNormaDelito);
//                    idrelacionNormaDelito++;
//                    maxDelitos++;
//                }
//                resultadoDTO.setResultado("Los Datos se guardaron correctamente");
//            }
//        }
        //normaLegalRepository.save(delito5Data);
        return resultadoDTO;
    }

    @Override
	public ResultadoDTO registrarNormaLegal(NormaLegalParam request) {
		ResultadoDTO resultadoDTO = new ResultadoDTO();
		String resultado = "";
        String codigo = "";
        long id = normaLegalRepository.count()+1;
        //System.out.println("id:"+id);
        try {
            if (request == null) {
                throw new NullPointerException(Constant.TEXTO_PARAMETRO_REQ_ISNULL);
            }
            Integer cantidad = normaLegalRepository.validarNormasLegalesTitulo(request.getTitulo().trim().toUpperCase());
            if (cantidad >= 1) {
                resultado = "El titulo " + request.getTitulo() + " ya existe!";
                codigo = "000";
            } else {
                MovNormaLegal delito5Data = new MovNormaLegal();
                MaeEstadoNormaLegal estadoNormaLegal = maeEstadoNormaLegalRepository.findById(Constant.REGISTRADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_ESTADO_NO_ENCONTRADO));
                delito5Data.setMovNormaLegalId(id);
                delito5Data.setTitulo(request.getTitulo().toUpperCase());
                delito5Data.setDescripcion(request.getDescripcion());
                delito5Data.setFechaPublicacionNorma(LocalDate.parse(request.getFechaPublicacion(), formatter));
                delito5Data.setUrl(request.getUrl());
                delito5Data.setFechaRegistro(LocalDate.now());
                delito5Data.setMaeEstadoNormaLegal(estadoNormaLegal);
                delito5Data.setEstado(Constant.L_ACTIVO);
                normaLegalRepository.save(delito5Data);
                resultado = "Se ha agregado el/la " + delito5Data.getTitulo();
                codigo = "001";
            }
        } catch (NullPointerException e) {
            resultado = Constant.TEXTO_ERROR_PARAMETRO_ES_NULO + e.getMessage();
            codigo = "003";
        } catch (Exception e) {
            //resultado = "Error inesperado al guardar los datos: " + e.getMessage();
            throw new RuntimeException("Error inesperado al guardar los datos: " + e.getMessage());
        }
        resultadoDTO.setResultado(resultado);
        resultadoDTO.setCodigo(codigo);
		return resultadoDTO;
	}

	@Override
	public ResultadoDTO modificarNormaLegal(NormaLegalParam request) {
		ResultadoDTO resultadoDTO = new ResultadoDTO();
		String resultado = "";
        String codigo = "";
        try {
            if (request == null) {
                throw new NullPointerException(Constant.TEXTO_PARAMETRO_REQ_ISNULL);
            }
            Integer cantidad = normaLegalRepository.validarNormasLegalesTituloModificar(request.getTitulo().trim().toUpperCase(), request.getId());
            MovNormaLegal delito5Data = normaLegalRepository.findById(request.getId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_NORMA_NO_ENCONTRADA));
            if (request.getTitulo() != null) {
                if (cantidad >= 1) {
                    resultado = "El titulo " + request.getTitulo() + " ya existe!";
                    codigo = "000";
                } else {
                    delito5Data.setTitulo(request.getTitulo().toUpperCase());
                    if (request.getDescripcion() != null) {
                        delito5Data.setDescripcion(request.getDescripcion());
                    }
                    if (request.getFechaPublicacion() != null) {
                        delito5Data.setFechaPublicacionNorma(LocalDate.parse(request.getFechaPublicacion(), formatter));
                    }
                    if (request.getUrl() != null) {
                        delito5Data.setUrl(request.getUrl());
                    }
                    normaLegalRepository.save(delito5Data);
                    resultado = "Se ha guardado los cambios realizados";
                    codigo = "001";
                }
            } else {
                if (request.getDescripcion() != null) {
                    delito5Data.setDescripcion(request.getDescripcion());
                }
                if (request.getFechaPublicacion() != null) {
                    delito5Data.setFechaPublicacionNorma(LocalDate.parse(request.getFechaPublicacion(), formatter));
                }
                if (request.getUrl() != null) {
                    delito5Data.setUrl(request.getUrl());
                }
                normaLegalRepository.save(delito5Data);
                resultado = "Se ha guardado los cambios realizados";
                codigo = "001";
            }
        } catch (NullPointerException e) {
            resultado = Constant.TEXTO_ERROR_PARAMETRO_ES_NULO + e.getMessage();
            codigo = "003";
        } catch (Exception e) {
            resultado = "Error inesperado al actualizar los datos: " + e.getMessage();
            codigo = "003";
        }
		resultadoDTO.setResultado(resultado);
        resultadoDTO.setCodigo(codigo);
		return resultadoDTO;
	}

	@Override
	public List<ValueView> estadosNormasLegales() {
		return normaLegalRepository.listarEstadosNormasLegales(Constant.ESTADO_ACTIVO);
	}

	@Override
	public List<DetalleNormaLegalDTO> listarDetalleNormasLegales(NormaLegalParam normaLegalParam, String codigoUsuario) {
        System.out.println("entro en listarDetalleNormasLegales");
        //Usuario usuario = usuarioRepository.buscarUsuarioxCodigo(codigoUsuario);
        Integer perfilId = usuarioRepository.buscarPerfilxCodigo(codigoUsuario);


        List<DetalleNormaLegalDTO> detalleNormaLegalDTOS = new ArrayList<>();
        try {
            if (normaLegalParam == null) {
                throw new NullPointerException(Constant.TEXTO_PARAMETRO_REQ_ISNULL);
            }
            // Obtenemos la lista de detalles
            List<DetalleNormaLegalView> detalleNormaLegalViews = relacionNormaDelitoRepository.ListarDetalleNormaLegal(normaLegalParam.getId());
            for (DetalleNormaLegalView detalleNormaLegalView : detalleNormaLegalViews) {
                DetalleNormaLegalDTO detalleNormaLegalDTO = new DetalleNormaLegalDTO();
                NormaLegalDelitoDTO normaLegalDelitoDTO = new NormaLegalDelitoDTO();
                NormaLegalCabDelitoDTO normaLegalCabDelitoDTO = new NormaLegalCabDelitoDTO();

                detalleNormaLegalDTO.setId(detalleNormaLegalView.getId());
                detalleNormaLegalDTO.setDelitoId(detalleNormaLegalView.getIdArticulo());
                detalleNormaLegalDTO.setDelitoIdOriginal(detalleNormaLegalView.getIdArticuloOriginal());
                detalleNormaLegalDTO.setAccion(detalleNormaLegalView.getAccion());
                detalleNormaLegalDTO.setCodFuente(detalleNormaLegalView.getCodFuente());
                detalleNormaLegalDTO.setAccesoPerfil(
                        Objects.equals(detalleNormaLegalView.getCodigoPerfil(), perfilId.longValue()) ? "1" : "0"
                );  //(detalleNormaLegalView.getCodigoPerfil());
                normaLegalCabDelitoDTO.setArticulo(detalleNormaLegalView.getArticulo());
                normaLegalCabDelitoDTO.setFuenteNormativa(detalleNormaLegalView.getFuenteNormativa());
                normaLegalCabDelitoDTO.setFechaRegistro(detalleNormaLegalView.getFechaRegistro());
                normaLegalCabDelitoDTO.setSumilla(detalleNormaLegalView.getSumilla());
                normaLegalCabDelitoDTO.setEstado(detalleNormaLegalView.getEstado());
                normaLegalCabDelitoDTO.setFechaFinVigencia(detalleNormaLegalView.getFechaFinVigencia());

                normaLegalDelitoDTO.setCabArticulo(normaLegalCabDelitoDTO);
                detalleNormaLegalDTO.setDelito(normaLegalDelitoDTO);

                detalleNormaLegalDTOS.add(detalleNormaLegalDTO);
            }
        } catch (NullPointerException e) {
            System.out.println(Constant.TEXTO_ERROR_PARAMETRO_ES_NULO + e.getMessage());
        } catch (Exception e) {
            System.out.println("Error inesperado al actualizar los datos: " + e.getMessage());
        }
        return detalleNormaLegalDTOS;
	}

	@Override
	public ResultadoDTO enviarNormaLegal(NormaLegalParam request) {
		ResultadoDTO resultadoDTO = new ResultadoDTO();
		MaeEstadoNormaLegal EstadoPublicacion = maeEstadoNormaLegalRepository.findById(Constant.POR_VALIDAR).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
        MaeEstadoNormaLegal EstadoFeErratas = maeEstadoNormaLegalRepository.findById(Constant.POR_VALIDAR_FE).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
		String resultado = "";
		try {
			if (request == null) {
				throw new NullPointerException(Constant.TEXTO_PARAMETRO_REQ_ISNULL);
			}
			MovNormaLegal delito5Data = normaLegalRepository.findById(request.getId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_NORMA_NO_ENCONTRADA));
            Long estado = delito5Data.getMaeEstadoNormaLegal().getMaeEstadoNormaLegalId();
            delito5Data.setFechaActualizacion(LocalDate.now());
            if(estado==14){
                delito5Data.setFechaFeErratas(LocalDate.now());
                delito5Data.setMaeEstadoNormaLegal(EstadoFeErratas);
            }
            else{
                delito5Data.setMaeEstadoNormaLegal(EstadoPublicacion);
            }
            normaLegalRepository.save(delito5Data);
            resultado = "Se enviÃ³ el/la " + delito5Data.getTitulo();
        } catch (NullPointerException e) {
			resultado = Constant.TEXTO_ERROR_PARAMETRO_ES_NULO + e.getMessage();
		} catch (Exception e) {
			resultado = Constant.TEXTO_ERROR_ENVIO_DATOS + e.getMessage();
		}
		resultadoDTO.setResultado(resultado);
		return resultadoDTO;
	}

	@Override
	public ResultadoDTO publicarNormaLegal(NormaLegalParam request) {
        ResultadoDTO resultadoDTO = new ResultadoDTO();
        MaeEstadoNormaLegal EstadoPublicacion = maeEstadoNormaLegalRepository.findById(Constant.PUBLICADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
        MaeEstadoNormaLegal EstadoFeErratas = maeEstadoNormaLegalRepository.findById(Constant.PUBLICADO_FE).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
        MovNormaLegal normaLegal = normaLegalRepository.findById(request.getId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_NORMA_NO_ENCONTRADA));
        String resultado = "";
        try {
            if (request == null) {
                throw new NullPointerException(Constant.TEXTO_PARAMETRO_REQ_ISNULL);
            }
            /*Actualiza Norma Legal*/
            Long estado = normaLegal.getMaeEstadoNormaLegal().getMaeEstadoNormaLegalId();
            if (estado == 15) {
                normaLegal.setMaeEstadoNormaLegal(EstadoFeErratas);
                normaLegal.setFechaFeErratas(LocalDate.now());
                normaLegalRepository.save(normaLegal);
            } else {
                normaLegal.setFechaActualizacion(LocalDate.now());
                normaLegal.setMaeEstadoNormaLegal(EstadoPublicacion);
                normaLegalRepository.save(normaLegal);
                MaeEstadoDelito estadoDelitoRegistrado = maeEstadoDelitoRepository.findById(Constant.REGISTRAR_NUEVO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
                List<MovDelito> delitoList = relacionNormaDelitoRepository.listaDelitos(request.getId());
                for (int i = 0; i < delitoList.size(); i++) {
                    MovDelito delito = articuloRepository.findById(delitoList.get(i).getMovDelitoId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
                    delito.setMaeEstadoDelito(estadoDelitoRegistrado);
                    delito.setFlag("U");
                    articuloRepository.save(delito);
                }
            }
            resultado = "Se publicÃ³ el/la " + normaLegal.getTitulo().trim();
        } catch (NullPointerException e) {
            resultado = Constant.TEXTO_ERROR_PARAMETRO_ES_NULO + e.getMessage();
        } catch (Exception e) {
            resultado = Constant.TEXTO_ERROR_ENVIO_DATOS + e.getMessage();
        }
        resultadoDTO.setResultado(resultado);
        return resultadoDTO;
	}

    @Override
    public ResultadoDTO activarFe(NormaLegalParam request) {
        ResultadoDTO resultadoDTO = new ResultadoDTO();
        MaeEstadoNormaLegal EstadoFeErratas = maeEstadoNormaLegalRepository.findById(Constant.FE_ERRATAS).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
        MaeEstadoNormaLegal EstadoPublicacion = maeEstadoNormaLegalRepository.findById(Constant.PUBLICADO).orElseThrow(() -> new RuntimeException(Constant.TEXTO_MAESTRA_NO_ENCONTRADO));
        String resultado = "";
        try {
            if (request == null) {
                throw new NullPointerException(Constant.TEXTO_PARAMETRO_REQ_ISNULL);
            }
            MovNormaLegal delito5Data = normaLegalRepository.findById(request.getId()).orElseThrow(() -> new RuntimeException(Constant.TEXTO_NORMA_NO_ENCONTRADA));
            if (delito5Data.getMaeEstadoNormaLegal().getMaeEstadoNormaLegalId() == 14) {
                delito5Data.setMaeEstadoNormaLegal(EstadoPublicacion);
                normaLegalRepository.save(delito5Data);
                resultado = "Se desactivÃ³ fe de erratas para el/la norma legal " + delito5Data.getTitulo();
            } else {
                delito5Data.setMaeEstadoNormaLegal(EstadoFeErratas);
                normaLegalRepository.save(delito5Data);
                resultado = "Se activÃ³ fe de erratas para el/la norma legal " + delito5Data.getTitulo();
            }
        } catch (NullPointerException e) {
            resultado = Constant.TEXTO_ERROR_PARAMETRO_ES_NULO + e.getMessage();
        } catch (Exception e) {
            resultado = Constant.TEXTO_ERROR_ENVIO_DATOS + e.getMessage();
        }
        resultadoDTO.setResultado(resultado);
        return resultadoDTO;
    }

}
